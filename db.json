{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":0,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/Asuewn.png","path":"avatar/Asuewn.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1595736877805},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1595736877806},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1595736877830},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1595736877806},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1595736877830},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1595736877843},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1595736877831},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1595736869936},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1595736877831},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1595736877831},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1595736877832},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1595736877833},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1595736877832},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1595736877832},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1595736877833},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1595736877834},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1595736877833},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1595736877834},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1595736877833},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1595736877841},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1595736877841},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1595736877841},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1595736877843},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1595736877842},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1595736877844},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1595736877843},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1595736877842},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1595736877835},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1595736877835},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1595736877834},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1595736877836},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1595736877836},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1595736877837},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1595736877835},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1595736877837},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1595736877838},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1595736877837},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1595736877840},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1595736877839},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1595736877840},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1595736877840},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1595736877840},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1595736877841},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1595736877859},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1595736877859},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1595736877844},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1595736877859},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1595736877860},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1595736877860},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1595736877861},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1595736877849},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1595736877858},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1595736877864},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1595736877865},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1595736877838},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1595736877864},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1595736877838},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1595736877865},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1595736877839},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1595736877839},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1595736877839},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1595736877839},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1595736877845},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1595736877845},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1595736877846},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1595736877845},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1595736877846},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1595736877847},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1595736877847},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1595736877846},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1595736877847},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1595736877847},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1595736877849},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1595736877848},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1595736877850},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1595736877855},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1595736877861},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1595736877862},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1595736877862},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1595736877863},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1595736877863},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1595736877854},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1595736877851},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1595736877863},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1595736877853},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1595736877857},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1595737000085},{"_id":"themes/archer/.eslintrc.json","hash":"5c79a54f29b1d32045e612fcb7379797d79ac380","modified":1595737000085},{"_id":"themes/archer/.gitignore","hash":"d28ead9d740a47a8b5df713aa9be01c4ec1004de","modified":1595737000087},{"_id":"themes/archer/.prettierignore","hash":"075b20da2bb3dfa7932394363d63d98cbb0b7042","modified":1595737000087},{"_id":"themes/archer/LICENSE","hash":"35f4fb806270f8243459c870a2141e795dfab166","modified":1595737000088},{"_id":"themes/archer/README.md","hash":"823e5e9791c556a212a7f7c5721c66048d666ae4","modified":1595737000088},{"_id":"themes/archer/_config.yml","hash":"b4d476b0521a6fc9a85a5532b4d0c19547e22a25","modified":1595738273748},{"_id":"themes/archer/.prettierrc.js","hash":"c77c76428fb4eefd727444d97fa2733a0c10286a","modified":1595737000087},{"_id":"themes/archer/package.json","hash":"c07c94772d0e92e77788b0fe5beb3d44eb3c245f","modified":1595737000105},{"_id":"themes/archer/webpack.config.js","hash":"348da2932316c2789a3c0a3cf5efff0dd7cc4ffe","modified":1595737000136},{"_id":"themes/archer/gulpfile.js","hash":"ba7c6a88298900460ddd1649300b5672956902f9","modified":1595737000092},{"_id":"themes/archer/webpack.prod.js","hash":"b6d35f7e9a9718b3e5e3e17c52fcc5e7c38330b0","modified":1595737000137},{"_id":"themes/archer/dev/archer.sh","hash":"9474c501c1c55f47f02cccdd9e2039498ebc5e43","modified":1595737000089},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"c10293eb8ccad5d02412a1369ec1c7e77516b929","modified":1595737000089},{"_id":"themes/archer/docs/README-en.md","hash":"e4fff6fc13f3296c2b168ab220f847192bf1273b","modified":1595737000089},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"522434202e5e810b3c7f9591eb3a4451a4e485f0","modified":1595737000090},{"_id":"themes/archer/layout/404.ejs","hash":"a054b4ea1147846bed4252dd56182cb8e32d95eb","modified":1595737000094},{"_id":"themes/archer/languages/en.yml","hash":"de8fe8ad1967854586fee2214094c4992dd05278","modified":1595737000093},{"_id":"themes/archer/layout/about.ejs","hash":"990df15653a99453617e72dfc195fa0a75b9a5d1","modified":1595737000101},{"_id":"themes/archer/languages/default.yml","hash":"c6e36691ded2a5e5939c67bf3c47104664ea56c6","modified":1595737000093},{"_id":"themes/archer/layout/site-meta.ejs","hash":"a9d85607fc7da51bb9becff7fe2f07a8b4fbc915","modified":1595737000102},{"_id":"themes/archer/layout/index.ejs","hash":"c0aad2cc8c644449d26e54fdcb6729132eb4d229","modified":1595737000101},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"7d1c5dbbc89b03b9e764e71aedb3f9567bed49bf","modified":1595737000086},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"1ee1770c446ffe4d489db8d216981f473da4addc","modified":1595737000087},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"21765ec5abc9a65513e6bff57cb021d3b3852d35","modified":1595737000094},{"_id":"themes/archer/layout/post.ejs","hash":"81adecc8e1a3579ce0de227054e1431adde5fe40","modified":1595737000102},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"ce7449948855556971a7353d4bfc7e8cd1b49634","modified":1595737000086},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"179a712ae139d8c5123338d9bd39d2b09c5ed2ce","modified":1595737000095},{"_id":"themes/archer/layout/layout.ejs","hash":"fffd1188977f74d19e2f9d267d085dddc9c6778e","modified":1595737000102},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"af76b1a18a63934e83b078bf5f9f886e972a0ceb","modified":1595737000096},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"5dadba1c15454e25740982b59ef382686f3c6e51","modified":1595737000096},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"a90bd2b089b335b141a6a0d8dee9a9cde60fdc5b","modified":1595737000095},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"065f8d6c4aae6782e6819815911f7feb6402a4ec","modified":1595737000096},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"92ac580acc20bde7b3345bfe132671b9043bfbd6","modified":1595737000096},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"e1b4893af2b18f502bad1b552c3f3381ecc3021f","modified":1595737000097},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1595737000106},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1595737000106},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"16d2b0b4246a1b2c4a71517b6d764420a6d87bbe","modified":1595737000095},{"_id":"themes/archer/source/assets/favicon.ico","hash":"8b200c575d273d41a179c102442e191414e74eae","modified":1595737000107},{"_id":"themes/archer/source/assets/loading.svg","hash":"85082b002bae1335114b71550350907884187e38","modified":1595737000107},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1595737000107},{"_id":"themes/archer/source/css/mobile.css","hash":"770d2ffb986a814c5e5662d28d2ec38864d8b1a0","modified":1595737000108},{"_id":"themes/archer/source/css/style.css","hash":"536949353dc3e909dc69d862e3181b57b33a622a","modified":1595737000108},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"fc03729825ac7ffd4045f910bbd936bc5841c65e","modified":1595737000099},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1595737000110},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1595737000111},{"_id":"themes/archer/source/scripts/search.js","hash":"174482c90b23c53ab5f3731a1124429870e3c0e3","modified":1595737000122},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"6f18a92bbe8bed93113449ed6ff8d148c1e7565a","modified":1595737000121},{"_id":"themes/archer/src/js/browser.js","hash":"35ea55f62c0f251817c46da0153f70aec323be3d","modified":1595737000124},{"_id":"themes/archer/src/js/fancybox.js","hash":"701720a4c56fb09d78ef3494fd3a88b4e2cde238","modified":1595737000125},{"_id":"themes/archer/source/scripts/share.js","hash":"2e2fb3857a75b51366cccd09ecd53355b3dbba37","modified":1595737000123},{"_id":"themes/archer/src/js/init.js","hash":"0cf1eb883b87590a771b687431cc5180064d13cd","modified":1595737000125},{"_id":"themes/archer/src/js/initSidebar.js","hash":"e27d52b4ccb9502836570a0673f6b656f9ce3661","modified":1595737000125},{"_id":"themes/archer/src/js/mobile.js","hash":"cfc37862242d5b7bd17028269436d3bc42e142e8","modified":1595737000126},{"_id":"themes/archer/src/js/main.js","hash":"673e19867b5ecf65b0c9c6579d40be587d0e8211","modified":1595737000125},{"_id":"themes/archer/src/js/scroll.js","hash":"83f0885f2673234c911d84a56fcaaa020cdcc3e6","modified":1595737000127},{"_id":"themes/archer/src/js/search.js","hash":"ef6533c876831377542a57f447550689144a6b71","modified":1595737000127},{"_id":"themes/archer/src/js/share.js","hash":"83a8ad056039cc673b939f47d69ad56337abc382","modified":1595737000127},{"_id":"themes/archer/src/js/sidebar.js","hash":"fe453bf01f7c4852012f015bcdfb78a7b6ff9e31","modified":1595737000128},{"_id":"themes/archer/src/js/tag.js","hash":"2163c58cb3a286fd355d7b99a1184193b383e062","modified":1595737000128},{"_id":"themes/archer/src/scss/_common.scss","hash":"05162d1562d4b141d9bad44c37b0b736371d8b08","modified":1595737000129},{"_id":"themes/archer/src/js/toc.js","hash":"5c4db488dc2d80315064c6832eecfb39017a8104","modified":1595737000128},{"_id":"themes/archer/src/js/util.js","hash":"7bec5b1ff8ee91f58d084c47e0ed3908b27adef7","modified":1595737000128},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"c6347bf137e80bb0c5b6368488ebd634c299016a","modified":1595737000129},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"fb6a1349bab25b65cf89b47e136d958d10947533","modified":1595737000129},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1595737000097},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1595737000110},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1595737000111},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1595737000113},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1595737000112},{"_id":"themes/archer/source/scripts/main.js","hash":"7f65aae2e1eec0abed4a26ee23c2e66d4bbdc449","modified":1595737000122},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0c3192b500a4fd550e483cf77a49806a5872185b","modified":1595737000120},{"_id":"themes/archer/src/scss/_variables.scss","hash":"2264c9b671643b3c64e002f968a75355e4091b61","modified":1595737000136},{"_id":"themes/archer/src/scss/mobile.scss","hash":"0a00e55e8b8d9551eed5966f53d8a6580b816dc5","modified":1595737000136},{"_id":"themes/archer/src/scss/style.scss","hash":"03bca94e57bc44723f8b73bb653f3e002b4b08a8","modified":1595737000136},{"_id":"themes/archer/layout/_partial/comment/gitalk.ejs","hash":"f0da0ecf7ce1dfc1f74fc763f1c4ea60e5ecc0b7","modified":1595737000098},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"f3b6356b13e145e5260b1b0a0ae6a7c397cf17fb","modified":1595737000098},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cfdb15116abe89f4b54f7bb18a0b23a597c47a60","modified":1595737000097},{"_id":"themes/archer/layout/_partial/comment/utteranc.ejs","hash":"1f72cf823dce6fec271a92e4e20fc5540fbea9c6","modified":1595737000098},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"a6acb5d7778ade98ba5b6932e38a585460513f49","modified":1595737000098},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"9cd4798cdcd712cc01c9e797adbb4810649310d4","modified":1595737000099},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"483c07212879b116b772f428547c9962be96d2ce","modified":1595737000099},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"f1f785de72e1f7056da8fdb12c85523d20a0b6b0","modified":1595737000099},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"c5ce643a06a2103aa4ac0d8279c024f90886d37f","modified":1595737000100},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"4feb7c3d17a3c8994eb095d43d75fbd0f1ed5b4f","modified":1595737000101},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"4281841e5bbb5e1a83c3ebf6506dab057e1fe6b9","modified":1595737000100},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"55c33bd49880ccaaa2f5d4dff44470886c3f3633","modified":1595737000130},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"244a4c71b862e6385a6de1e83a4975418a8c6fe7","modified":1595737000097},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"e96750b1aa7113322696857882b1e1fde11c1fc4","modified":1595737000101},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"08594f05f6ed238a7b79d48ebc1ff1e5c9deec46","modified":1595737000130},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1595737000092},{"_id":"themes/archer/package-lock.json","hash":"f3eae5d3878f7761231613b74be88173d3047c0c","modified":1595737000105},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1595737000119},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"e710acbc85e1cc5ae0e7ab5b5899837b9f222b97","modified":1595737000100},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"82a04b6ebb684a87f486cac8f08619ecb52605fd","modified":1595737000130},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"4d4713ec4b766a60577546af9f98eb721c4a63cd","modified":1595737000134},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1595737000115},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"1e4510959f51b5d4d3c5781468c77d25546ce905","modified":1595737000133},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"46d315718d86e9701573df2e39299895d8ca193c","modified":1595737000132},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"18c6e1cff4327e8b4ada15be8f40ccad8947471f","modified":1595737000132},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"b3cf7523d8e91fce92cd6a118e308632047cc7b3","modified":1595737000132},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"c623385d72ce12fa403f5384ded79c3897d0fc9f","modified":1595737000133},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"b6db1d4a29c34e1b834c54ca076b8084ceac4885","modified":1595737000133},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"b41904da65b1128510d28a57142298bfd844f7f5","modified":1595737000135},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"28b97b11f17d57a258747bb0facae0ad1911f9d5","modified":1595737000134},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"30a3b9165c97bac6f6c795e598408639f5d9670a","modified":1595737000134},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"7f20bdb96b402663a0e2bfcf7f4827198611a3c4","modified":1595737000135},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1595737000118},{"_id":"source/_posts/JUC.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588251351609},{"_id":"source/_posts/JVM.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588251351609},{"_id":"source/_posts/Spring.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589244934599},{"_id":"source/_posts/分布式.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588251351609},{"_id":"source/_posts/微服务.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588251351609},{"_id":"source/_posts/IO模型详解.md","hash":"6a35cc3e20d82f7cb8d93f8bd45b4ed0802dc94c","modified":1588779722979},{"_id":"source/_posts/Java基础.md","hash":"34068c6126d045986f912023b04a9242e0721f7e","modified":1588257640054},{"_id":"source/_posts/Linux.md","hash":"e27d139a489f7dcc21a4471dae429b656954a39c","modified":1588251783075},{"_id":"source/_posts/MQ.md","hash":"d1bc3b5317e577cd11b5aad9a1465feb0d970c4c","modified":1592238662416},{"_id":"source/_posts/Mybatis.md","hash":"e27d139a489f7dcc21a4471dae429b656954a39c","modified":1588251783075},{"_id":"source/_posts/MySQL.md","hash":"e2036f9aedfc616ad96784957f2f9b13b801a6c2","modified":1588255085301},{"_id":"source/_posts/学习链接.md","hash":"d51577173563aef95810c318495a11f1af6fcc1b","modified":1589731989748},{"_id":"source/_posts/Spring中的设计模式.md","hash":"baddded92e24466f43e9d9d2331ad3e413ab78e5","modified":1589726687256},{"_id":"source/_posts/数据结构和算法.md","hash":"bf90eacc79abc37a41fc1667bcc0abca082bd4e4","modified":1590510252498},{"_id":"source/_posts/设计模式.md","hash":"b066e39348faa3e184b28707d1adc7b8480d322d","modified":1589117999258},{"_id":"source/_posts/面试题.md","hash":"2cdcc3e912816fec8735885d902b17f8cd73a335","modified":1590338102647},{"_id":"themes/archer/source/avatar/Asuewn.png","hash":"4baba32fd708e65a2db3042700ebcba66c2d79a7","modified":1595737379800},{"_id":"public/content.json","hash":"e5a4d6b657650080251e99b512bcf5b021de5b23","modified":1595737955751},{"_id":"public/2020/07/26/hello-world/index.html","hash":"f19c9c533c9986f6df9f4b2a63ae3999472713d0","modified":1595738294105},{"_id":"public/2020/05/22/面试题/index.html","hash":"ecaefc299abcd41fcb0bb810c7a91976e08a4438","modified":1595738294105},{"_id":"public/2020/05/17/Spring中的设计模式/index.html","hash":"3f4124bc123feb1c1e0e7e9036bc6a51d98e36ef","modified":1595738294105},{"_id":"public/2020/05/11/微服务/index.html","hash":"b30a01fec50bad003163de2bb57cabb324c2085f","modified":1595738294105},{"_id":"public/2020/05/11/分布式/index.html","hash":"791bb7ec30eb2e5489d4de8686359776a7ff3169","modified":1595738294105},{"_id":"public/2020/04/30/Mybatis/index.html","hash":"ff8eddf7419b7338a55db687f42bbba6dc26023d","modified":1595738294105},{"_id":"public/2020/04/30/Linux/index.html","hash":"d0c0cdf21cdf70224df2bfe039524de79b077617","modified":1595738294105},{"_id":"public/2020/04/30/学习链接/index.html","hash":"bfa738bb7a602ba36e463d15f97057710fa725ff","modified":1595738294105},{"_id":"public/2020/04/30/设计模式/index.html","hash":"3a8d6a0877b5894fd9db9a14eb22ebcf5103b9a0","modified":1595738294105},{"_id":"public/2020/04/30/Java基础/index.html","hash":"35417ddec41a1fcd05a4105e180990bd5940e761","modified":1595738294105},{"_id":"public/2020/04/30/数据结构和算法/index.html","hash":"bc2627bce729fe8ed18dd0bd685ec832392aa068","modified":1595738294105},{"_id":"public/2020/04/30/MQ/index.html","hash":"f620b75041858914b4b14d95fc65ee1dbde230e9","modified":1595738294105},{"_id":"public/2020/04/30/JUC/index.html","hash":"f2dcfb963925fd7bc6b54a07bcf1b162eadb5851","modified":1595738294105},{"_id":"public/2020/04/30/JVM/index.html","hash":"9470d1534f6e6a2e96d8db30815da055ed342ae8","modified":1595738294105},{"_id":"public/2020/04/30/Spring/index.html","hash":"6317417e0dfcc7d744988ca0d430f38f361c3d52","modified":1595738294105},{"_id":"public/2020/04/30/MySQL/index.html","hash":"6654aa3ad5a9d62af98fa5379a20eb94304efdb4","modified":1595738294105},{"_id":"public/2020/04/28/IO模型详解/index.html","hash":"1c78eb8b03e265c747e361646d39ba89c9d230f0","modified":1595738294105},{"_id":"public/index.html","hash":"fd8e4f645d5429201c4542d03e8866a7a0436679","modified":1595738294105},{"_id":"public/page/2/index.html","hash":"7b39e30f97afd4a2288c0e4323f5f50b529bf352","modified":1595738294105},{"_id":"public/archives/index.html","hash":"d5a90a97b1c4d83a5d05f5303a55b56f7ca21324","modified":1595738294105},{"_id":"public/archives/page/2/index.html","hash":"c259cacfb79a18ff14fec925805b37c28af43bac","modified":1595738294105},{"_id":"public/archives/2020/index.html","hash":"5825420cb82e683fd8190447ad7bd3ef343f5e06","modified":1595738294105},{"_id":"public/archives/2020/page/2/index.html","hash":"a333206c2354f3be3193a0a26452dbf6c2739697","modified":1595738294105},{"_id":"public/archives/2020/04/index.html","hash":"ce84fdde44ff69c36e9565b342f8a113af5e36a4","modified":1595738294105},{"_id":"public/archives/2020/04/page/2/index.html","hash":"5266dbd99bb651a20b3f6ea295b7ee6a21d2377b","modified":1595738294105},{"_id":"public/archives/2020/05/index.html","hash":"5220573bddb48df6d81d719fce7c3db527ed6260","modified":1595738294105},{"_id":"public/archives/2020/07/index.html","hash":"e3d1c045f84e7e4dae84c49d934037967641a30d","modified":1595738294105},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1595737824913},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1595737824913},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1595737824913},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1595737824913},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1595737824913},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1595737824913},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1595737824913},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1595737824913},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1595737824913},{"_id":"public/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1595737824913},{"_id":"public/assets/favicon.ico","hash":"8b200c575d273d41a179c102442e191414e74eae","modified":1595737824913},{"_id":"public/assets/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1595737824913},{"_id":"public/assets/loading.svg","hash":"85082b002bae1335114b71550350907884187e38","modified":1595737824913},{"_id":"public/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1595737824913},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1595737824913},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1595737824913},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1595737824913},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1595737824913},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1595737824913},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1595737824913},{"_id":"public/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1595737824913},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1595737824913},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1595737824913},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1595737824913},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1595737824913},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1595737824913},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1595737824913},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1595737824913},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1595737824913},{"_id":"public/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1595737824913},{"_id":"public/scripts/search.js","hash":"127c388b575c2cb0a850b32c08dd61d6a6f690ba","modified":1595737824913},{"_id":"public/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1595737824913},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1595737824913},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1595737824913},{"_id":"public/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1595737824913},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1595737824913},{"_id":"public/css/style.css","hash":"8e41748502e35784a242c3f11d758fece302f77c","modified":1595737824913},{"_id":"public/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1595737824913},{"_id":"public/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1595737824913},{"_id":"public/scripts/share.js","hash":"419c5e6e202fc899411d36e24cf453b48af8aef7","modified":1595737824913},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1595737824913},{"_id":"public/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1595737824913},{"_id":"public/scripts/main.js","hash":"2cfe993eb1579e8aebf73b00d699b25be07981fa","modified":1595737824913},{"_id":"public/avatar/Asuewn.png","hash":"4baba32fd708e65a2db3042700ebcba66c2d79a7","modified":1595737824913}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-07-26T04:14:29.936Z","updated":"2020-07-26T04:14:29.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd2kmp5i0000ikv9e91s4dzh","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"_content":"https://blog.csdn.net/qq_38762479/article/details/89306984\nhttps://blog.csdn.net/u012588160/article/details/100108895\nhttps://blog.csdn.net/u010970712/article/details/80042731\nhttps://docs.oracle.com/javase/specs/jvms/se14/html/index.html\nhttps://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md Cs-Notes\nhttps://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7 尚硅谷路线图2020\nhttps://www.cnblogs.com/onepixel/articles/7674659.html 排序算法 \nhttps://computer.howstuffworks.com/ram.htm RAM工作原理\n\nhttp://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/toc.html  Unix网络编程电子书\n\nhttps://github.com/haiyusun/coding-interviews 剑指offer答案","source":"_posts/学习链接.md","raw":"https://blog.csdn.net/qq_38762479/article/details/89306984\nhttps://blog.csdn.net/u012588160/article/details/100108895\nhttps://blog.csdn.net/u010970712/article/details/80042731\nhttps://docs.oracle.com/javase/specs/jvms/se14/html/index.html\nhttps://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md Cs-Notes\nhttps://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7 尚硅谷路线图2020\nhttps://www.cnblogs.com/onepixel/articles/7674659.html 排序算法 \nhttps://computer.howstuffworks.com/ram.htm RAM工作原理\n\nhttp://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/toc.html  Unix网络编程电子书\n\nhttps://github.com/haiyusun/coding-interviews 剑指offer答案","slug":"学习链接","published":1,"date":"2020-04-30T13:02:46.332Z","updated":"2020-05-17T16:13:09.748Z","title":"学习链接","_id":"ckd2l2x920000vgv95qyy70z4","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://blog.csdn.net/qq_38762479/article/details/89306984\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_38762479/article/details/89306984</a><br><a href=\"https://blog.csdn.net/u012588160/article/details/100108895\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012588160/article/details/100108895</a><br><a href=\"https://blog.csdn.net/u010970712/article/details/80042731\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010970712/article/details/80042731</a><br><a href=\"https://docs.oracle.com/javase/specs/jvms/se14/html/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/specs/jvms/se14/html/index.html</a><br><a href=\"https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md\" target=\"_blank\" rel=\"noopener\">https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md</a> Cs-Notes<br><a href=\"https://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7</a> 尚硅谷路线图2020<br><a href=\"https://www.cnblogs.com/onepixel/articles/7674659.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/onepixel/articles/7674659.html</a> 排序算法<br><a href=\"https://computer.howstuffworks.com/ram.htm\" target=\"_blank\" rel=\"noopener\">https://computer.howstuffworks.com/ram.htm</a> RAM工作原理</p>\n<p><a href=\"http://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/toc.html\" target=\"_blank\" rel=\"noopener\">http://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/toc.html</a>  Unix网络编程电子书</p>\n<p><a href=\"https://github.com/haiyusun/coding-interviews\" target=\"_blank\" rel=\"noopener\">https://github.com/haiyusun/coding-interviews</a> 剑指offer答案</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/qq_38762479/article/details/89306984\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_38762479/article/details/89306984</a><br><a href=\"https://blog.csdn.net/u012588160/article/details/100108895\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012588160/article/details/100108895</a><br><a href=\"https://blog.csdn.net/u010970712/article/details/80042731\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010970712/article/details/80042731</a><br><a href=\"https://docs.oracle.com/javase/specs/jvms/se14/html/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/specs/jvms/se14/html/index.html</a><br><a href=\"https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md\" target=\"_blank\" rel=\"noopener\">https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md</a> Cs-Notes<br><a href=\"https://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7</a> 尚硅谷路线图2020<br><a href=\"https://www.cnblogs.com/onepixel/articles/7674659.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/onepixel/articles/7674659.html</a> 排序算法<br><a href=\"https://computer.howstuffworks.com/ram.htm\" target=\"_blank\" rel=\"noopener\">https://computer.howstuffworks.com/ram.htm</a> RAM工作原理</p>\n<p><a href=\"http://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/toc.html\" target=\"_blank\" rel=\"noopener\">http://www.masterraghu.com/subjects/np/introduction/unix_network_programming_v1.3/toc.html</a>  Unix网络编程电子书</p>\n<p><a href=\"https://github.com/haiyusun/coding-interviews\" target=\"_blank\" rel=\"noopener\">https://github.com/haiyusun/coding-interviews</a> 剑指offer答案</p>\n"},{"_content":"https://blog.csdn.net/qq_38762479/article/details/89306984\nhttps://blog.csdn.net/u012588160/article/details/100108895\nhttps://blog.csdn.net/u010970712/article/details/80042731\nhttps://docs.oracle.com/javase/specs/jvms/se14/html/index.html\nhttps://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md Cs-Notes\nhttps://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7 尚硅谷路线图2020\nhttps://www.cnblogs.com/onepixel/articles/7674659.html 排序算法 \nhttps://computer.howstuffworks.com/ram.htm RAM工作原理","source":"_posts/Linux.md","raw":"https://blog.csdn.net/qq_38762479/article/details/89306984\nhttps://blog.csdn.net/u012588160/article/details/100108895\nhttps://blog.csdn.net/u010970712/article/details/80042731\nhttps://docs.oracle.com/javase/specs/jvms/se14/html/index.html\nhttps://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md Cs-Notes\nhttps://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7 尚硅谷路线图2020\nhttps://www.cnblogs.com/onepixel/articles/7674659.html 排序算法 \nhttps://computer.howstuffworks.com/ram.htm RAM工作原理","slug":"Linux","published":1,"date":"2020-04-30T13:03:54.112Z","updated":"2020-04-30T13:03:03.075Z","title":"Linux","_id":"ckd2l2xa20001vgv98tu89dt9","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://blog.csdn.net/qq_38762479/article/details/89306984\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_38762479/article/details/89306984</a><br><a href=\"https://blog.csdn.net/u012588160/article/details/100108895\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012588160/article/details/100108895</a><br><a href=\"https://blog.csdn.net/u010970712/article/details/80042731\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010970712/article/details/80042731</a><br><a href=\"https://docs.oracle.com/javase/specs/jvms/se14/html/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/specs/jvms/se14/html/index.html</a><br><a href=\"https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md\" target=\"_blank\" rel=\"noopener\">https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md</a> Cs-Notes<br><a href=\"https://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7</a> 尚硅谷路线图2020<br><a href=\"https://www.cnblogs.com/onepixel/articles/7674659.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/onepixel/articles/7674659.html</a> 排序算法<br><a href=\"https://computer.howstuffworks.com/ram.htm\" target=\"_blank\" rel=\"noopener\">https://computer.howstuffworks.com/ram.htm</a> RAM工作原理</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/qq_38762479/article/details/89306984\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_38762479/article/details/89306984</a><br><a href=\"https://blog.csdn.net/u012588160/article/details/100108895\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012588160/article/details/100108895</a><br><a href=\"https://blog.csdn.net/u010970712/article/details/80042731\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010970712/article/details/80042731</a><br><a href=\"https://docs.oracle.com/javase/specs/jvms/se14/html/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/specs/jvms/se14/html/index.html</a><br><a href=\"https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md\" target=\"_blank\" rel=\"noopener\">https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md</a> Cs-Notes<br><a href=\"https://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7</a> 尚硅谷路线图2020<br><a href=\"https://www.cnblogs.com/onepixel/articles/7674659.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/onepixel/articles/7674659.html</a> 排序算法<br><a href=\"https://computer.howstuffworks.com/ram.htm\" target=\"_blank\" rel=\"noopener\">https://computer.howstuffworks.com/ram.htm</a> RAM工作原理</p>\n"},{"_content":"https://blog.csdn.net/qq_38762479/article/details/89306984\nhttps://blog.csdn.net/u012588160/article/details/100108895\nhttps://blog.csdn.net/u010970712/article/details/80042731\nhttps://docs.oracle.com/javase/specs/jvms/se14/html/index.html\nhttps://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md Cs-Notes\nhttps://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7 尚硅谷路线图2020\nhttps://www.cnblogs.com/onepixel/articles/7674659.html 排序算法 \nhttps://computer.howstuffworks.com/ram.htm RAM工作原理","source":"_posts/Mybatis.md","raw":"https://blog.csdn.net/qq_38762479/article/details/89306984\nhttps://blog.csdn.net/u012588160/article/details/100108895\nhttps://blog.csdn.net/u010970712/article/details/80042731\nhttps://docs.oracle.com/javase/specs/jvms/se14/html/index.html\nhttps://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md Cs-Notes\nhttps://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7 尚硅谷路线图2020\nhttps://www.cnblogs.com/onepixel/articles/7674659.html 排序算法 \nhttps://computer.howstuffworks.com/ram.htm RAM工作原理","slug":"Mybatis","published":1,"date":"2020-04-30T13:26:04.808Z","updated":"2020-04-30T13:03:03.075Z","title":"Mybatis","_id":"ckd2l2xa80002vgv9fjacf67d","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://blog.csdn.net/qq_38762479/article/details/89306984\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_38762479/article/details/89306984</a><br><a href=\"https://blog.csdn.net/u012588160/article/details/100108895\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012588160/article/details/100108895</a><br><a href=\"https://blog.csdn.net/u010970712/article/details/80042731\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010970712/article/details/80042731</a><br><a href=\"https://docs.oracle.com/javase/specs/jvms/se14/html/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/specs/jvms/se14/html/index.html</a><br><a href=\"https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md\" target=\"_blank\" rel=\"noopener\">https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md</a> Cs-Notes<br><a href=\"https://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7</a> 尚硅谷路线图2020<br><a href=\"https://www.cnblogs.com/onepixel/articles/7674659.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/onepixel/articles/7674659.html</a> 排序算法<br><a href=\"https://computer.howstuffworks.com/ram.htm\" target=\"_blank\" rel=\"noopener\">https://computer.howstuffworks.com/ram.htm</a> RAM工作原理</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/qq_38762479/article/details/89306984\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_38762479/article/details/89306984</a><br><a href=\"https://blog.csdn.net/u012588160/article/details/100108895\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u012588160/article/details/100108895</a><br><a href=\"https://blog.csdn.net/u010970712/article/details/80042731\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/u010970712/article/details/80042731</a><br><a href=\"https://docs.oracle.com/javase/specs/jvms/se14/html/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.oracle.com/javase/specs/jvms/se14/html/index.html</a><br><a href=\"https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md\" target=\"_blank\" rel=\"noopener\">https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md</a> Cs-Notes<br><a href=\"https://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/read/cv5216534/?spm_id_from=333.788.b_636f6d6d656e74.7</a> 尚硅谷路线图2020<br><a href=\"https://www.cnblogs.com/onepixel/articles/7674659.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/onepixel/articles/7674659.html</a> 排序算法<br><a href=\"https://computer.howstuffworks.com/ram.htm\" target=\"_blank\" rel=\"noopener\">https://computer.howstuffworks.com/ram.htm</a> RAM工作原理</p>\n"},{"_content":"设计模式\n\n\n\npublic class Singleton {  \n    private static Singleton instance;  \n    private Singleton (){}  \n\n    public static Singleton getInstance() {  \n    if (instance == null) {  \n        instance = new Singleton();  \n    }  \n    return instance;  \n    }  \n}\n\npublic class Singleton {  \n    private static Singleton instance;  \n    private Singleton (){}  \n    public static synchronized Singleton getInstance() {  \n    if (instance == null) {  \n        instance = new Singleton();  \n    }  \n    return instance;  \n    }  \n}\n\npublic class Singleton {  \n    private static Singleton instance = new Singleton();  \n    private Singleton (){}  \n    public static Singleton getInstance() {  \n    return instance;  \n    }  \n}\n\npublic class Singleton {  \n    private volatile static Singleton singleton;  \n    private Singleton (){}  \n    public static Singleton getSingleton() {  \n    if (singleton == null) {  \n        synchronized (Singleton.class) {  \n        if (singleton == null) {  \n            singleton = new Singleton();  \n        }  \n        }  \n    }  \n    return singleton;  \n    }  \n}\n\npublic class Singleton {  \n    private static class SingletonHolder {  \n    private static final Singleton INSTANCE = new Singleton();  \n    }  \n    private Singleton (){}  \n    public static final Singleton getInstance() {  \n    return SingletonHolder.INSTANCE;  \n    }  \n}\n\npublic enum Singleton {  \n    INSTANCE;  \n    public void whateverMethod() {  \n    }  \n}","source":"_posts/设计模式.md","raw":"设计模式\n\n\n\npublic class Singleton {  \n    private static Singleton instance;  \n    private Singleton (){}  \n\n    public static Singleton getInstance() {  \n    if (instance == null) {  \n        instance = new Singleton();  \n    }  \n    return instance;  \n    }  \n}\n\npublic class Singleton {  \n    private static Singleton instance;  \n    private Singleton (){}  \n    public static synchronized Singleton getInstance() {  \n    if (instance == null) {  \n        instance = new Singleton();  \n    }  \n    return instance;  \n    }  \n}\n\npublic class Singleton {  \n    private static Singleton instance = new Singleton();  \n    private Singleton (){}  \n    public static Singleton getInstance() {  \n    return instance;  \n    }  \n}\n\npublic class Singleton {  \n    private volatile static Singleton singleton;  \n    private Singleton (){}  \n    public static Singleton getSingleton() {  \n    if (singleton == null) {  \n        synchronized (Singleton.class) {  \n        if (singleton == null) {  \n            singleton = new Singleton();  \n        }  \n        }  \n    }  \n    return singleton;  \n    }  \n}\n\npublic class Singleton {  \n    private static class SingletonHolder {  \n    private static final Singleton INSTANCE = new Singleton();  \n    }  \n    private Singleton (){}  \n    public static final Singleton getInstance() {  \n    return SingletonHolder.INSTANCE;  \n    }  \n}\n\npublic enum Singleton {  \n    INSTANCE;  \n    public void whateverMethod() {  \n    }  \n}","slug":"设计模式","published":1,"date":"2020-04-30T12:59:21.906Z","updated":"2020-05-10T13:39:59.258Z","title":"设计模式","_id":"ckd2l2xbt0003vgv9gu347toa","comments":1,"layout":"post","photos":[],"link":"","content":"<p>设计模式</p>\n<p>public class Singleton {<br>    private static Singleton instance;<br>    private Singleton (){}  </p>\n<pre><code>public static Singleton getInstance() {  \nif (instance == null) {  \n    instance = new Singleton();  \n}  \nreturn instance;  \n}  </code></pre><p>}</p>\n<p>public class Singleton {<br>    private static Singleton instance;<br>    private Singleton (){}<br>    public static synchronized Singleton getInstance() {<br>    if (instance == null) {<br>        instance = new Singleton();<br>    }<br>    return instance;<br>    }<br>}</p>\n<p>public class Singleton {<br>    private static Singleton instance = new Singleton();<br>    private Singleton (){}<br>    public static Singleton getInstance() {<br>    return instance;<br>    }<br>}</p>\n<p>public class Singleton {<br>    private volatile static Singleton singleton;<br>    private Singleton (){}<br>    public static Singleton getSingleton() {<br>    if (singleton == null) {<br>        synchronized (Singleton.class) {<br>        if (singleton == null) {<br>            singleton = new Singleton();<br>        }<br>        }<br>    }<br>    return singleton;<br>    }<br>}</p>\n<p>public class Singleton {<br>    private static class SingletonHolder {<br>    private static final Singleton INSTANCE = new Singleton();<br>    }<br>    private Singleton (){}<br>    public static final Singleton getInstance() {<br>    return SingletonHolder.INSTANCE;<br>    }<br>}</p>\n<p>public enum Singleton {<br>    INSTANCE;<br>    public void whateverMethod() {<br>    }<br>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>设计模式</p>\n<p>public class Singleton {<br>    private static Singleton instance;<br>    private Singleton (){}  </p>\n<pre><code>public static Singleton getInstance() {  \nif (instance == null) {  \n    instance = new Singleton();  \n}  \nreturn instance;  \n}  </code></pre><p>}</p>\n<p>public class Singleton {<br>    private static Singleton instance;<br>    private Singleton (){}<br>    public static synchronized Singleton getInstance() {<br>    if (instance == null) {<br>        instance = new Singleton();<br>    }<br>    return instance;<br>    }<br>}</p>\n<p>public class Singleton {<br>    private static Singleton instance = new Singleton();<br>    private Singleton (){}<br>    public static Singleton getInstance() {<br>    return instance;<br>    }<br>}</p>\n<p>public class Singleton {<br>    private volatile static Singleton singleton;<br>    private Singleton (){}<br>    public static Singleton getSingleton() {<br>    if (singleton == null) {<br>        synchronized (Singleton.class) {<br>        if (singleton == null) {<br>            singleton = new Singleton();<br>        }<br>        }<br>    }<br>    return singleton;<br>    }<br>}</p>\n<p>public class Singleton {<br>    private static class SingletonHolder {<br>    private static final Singleton INSTANCE = new Singleton();<br>    }<br>    private Singleton (){}<br>    public static final Singleton getInstance() {<br>    return SingletonHolder.INSTANCE;<br>    }<br>}</p>\n<p>public enum Singleton {<br>    INSTANCE;<br>    public void whateverMethod() {<br>    }<br>}</p>\n"},{"_content":"### String\n\n1、为什么String类设计为final\n\n1、String类型不可变才能维护一个String常量池。当两个String变量拥有同样的值时，可以将变量直接指向String常量池。\n\n2、String类型不可变，所以创建的时候就计算了hashcode且不会再变，是得Hashmap中可以使用String作为可靠的Key。\n\n## Hashmap,ConcurrentHashMap","source":"_posts/Java基础.md","raw":"### String\n\n1、为什么String类设计为final\n\n1、String类型不可变才能维护一个String常量池。当两个String变量拥有同样的值时，可以将变量直接指向String常量池。\n\n2、String类型不可变，所以创建的时候就计算了hashcode且不会再变，是得Hashmap中可以使用String作为可靠的Key。\n\n## Hashmap,ConcurrentHashMap","slug":"Java基础","published":1,"date":"2020-04-30T12:57:21.781Z","updated":"2020-04-30T14:40:40.054Z","title":"Java基础","_id":"ckd2l2xc10004vgv9ccve09ip","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><p>1、为什么String类设计为final</p>\n<p>1、String类型不可变才能维护一个String常量池。当两个String变量拥有同样的值时，可以将变量直接指向String常量池。</p>\n<p>2、String类型不可变，所以创建的时候就计算了hashcode且不会再变，是得Hashmap中可以使用String作为可靠的Key。</p>\n<h2 id=\"Hashmap-ConcurrentHashMap\"><a href=\"#Hashmap-ConcurrentHashMap\" class=\"headerlink\" title=\"Hashmap,ConcurrentHashMap\"></a>Hashmap,ConcurrentHashMap</h2>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><p>1、为什么String类设计为final</p>\n<p>1、String类型不可变才能维护一个String常量池。当两个String变量拥有同样的值时，可以将变量直接指向String常量池。</p>\n<p>2、String类型不可变，所以创建的时候就计算了hashcode且不会再变，是得Hashmap中可以使用String作为可靠的Key。</p>\n<h2 id=\"Hashmap-ConcurrentHashMap\"><a href=\"#Hashmap-ConcurrentHashMap\" class=\"headerlink\" title=\"Hashmap,ConcurrentHashMap\"></a>Hashmap,ConcurrentHashMap</h2>"},{"_content":"## NIO是什么?\n\n定义：NIO(Non-blocking I/O,New I/O)即非阻塞I/O,属于IO模型的一种\n\n分类：同步/异步  阻塞/非阻塞 I/O \n\n\n\n首先什么是I/O操作?I/O(input/output),是机器获取和交换信息的主要渠道。\n\n在操作系统执行I/O操作的时候,通常都会涉及到用户态(User Mode)和内核态(Kernel Mode)的转换。\n\n对于一个input操作来说，通常有两个步骤。1、等待数据就绪 2、将数据从kernel缓冲复制到user缓冲\n\nUnix(-like)系统下的五种基本I/O模型\n\n- blocking I/O\n\n  一种常见的I/O模型，进程在调用recvfrom之后就一直处于阻塞状态，直到内核进程返回执行结果。\n\n  \n\n- nonblocking I/O\n\n  进程不断的调用recvfrom，内核在数据包就绪之前一直返回EWOULDBLOCK标识。数据包就绪之后再开始复制数据，完成后返回OK。\n\n  \n\n- I/O multiplexing (`select` and `poll`)\n\n  在直接调用recvfrom之前，先调用select来确定数据报是否就绪，如果就绪了内核会返回一个readable标识。收到readable标识后再去调用recvform来通知内核执行复制操作。\n\n  \n\n  总结：这个和第一个blocking I/O来比没啥太大优点，还多了一次系统调用。好处就是可以等待多个数据报就绪的结果了，然后哪个就绪了就处理哪个。\n\n  ##### 关于select,poll和epoll\n\n  他们都是用来监听文件描述符fd的系统调用方法。select和poll可以认为是一样的，都是使用轮询的方式来从很多fd中检查哪一个就绪了。由于时间复杂度为O(n)，不适合执行大量密集fd的监控,后来出现了时间复杂度为O(1)的epoll替代他们。它是一种类似订阅的实现, `epoll` 包括(`epoll_create`, `epoll_ctl`, `epoll_wait`) ,首先epoll_create建立一个epoll，`epoll_ctl`来设定要监控的fd类型和事件类型，`epoll_wait`来获取结果\n\n- signal driven I/O (`SIGIO`)\n\n  \n\n  首先调用sigaction建立一个信号句柄，内核会立即返回，这个过程非阻塞。数据报就绪后，内核会给进程生成一个SIGIO，这个时候可以再去调用recvfrom\n\n- asynchronous I/O (the POSIX `aio_` functions)\n\n  \n\n通过调用aio_read告知内核再整个input操作完成后(包括等待数据、复制到user缓冲)再通知，整个过程中进程是没有阻塞的，是真正的异步操作。\n\n**POSIX**如下规定：\n\n一个同步IO操作让申请进程在I/O操作结束之前一直被阻塞，反之异步操作就是没有被阻塞。\n\n所以说前面四种都是同步I/O，只有最后一个asynchronous I/O才是真正的异步I/O\n\n\n\n#### Java中的BIO，NIO，AIO\n\nbio: 基于java.lang.io\n\nnio: java1.4后引入 java.lang.nio\n\naio:Java 7引入\n\n\n\n#### 其他\n\n文件描述符(****file descriptor**,FD**,**fildes**)是一个获取文件资源(或其他IO资源)的句柄([handle](https://en.wikipedia.org/wiki/Handle_(computing)))，通常是一个非负整数\n\nThe **Portable Operating System Interface** (**POSIX**) :旨在维持操作系统兼容性的标准\n\n参考文献：\n\nhttps://jvns.ca/blog/2017/06/03/async-io-on-linux--select--poll--and-epoll/\n\nhttps://www.ibm.com/developerworks/cn/java/j-lo-javaio/index.html\n\nhttp://tutorials.jenkov.com/\n\n","source":"_posts/IO模型详解.md","raw":"## NIO是什么?\n\n定义：NIO(Non-blocking I/O,New I/O)即非阻塞I/O,属于IO模型的一种\n\n分类：同步/异步  阻塞/非阻塞 I/O \n\n\n\n首先什么是I/O操作?I/O(input/output),是机器获取和交换信息的主要渠道。\n\n在操作系统执行I/O操作的时候,通常都会涉及到用户态(User Mode)和内核态(Kernel Mode)的转换。\n\n对于一个input操作来说，通常有两个步骤。1、等待数据就绪 2、将数据从kernel缓冲复制到user缓冲\n\nUnix(-like)系统下的五种基本I/O模型\n\n- blocking I/O\n\n  一种常见的I/O模型，进程在调用recvfrom之后就一直处于阻塞状态，直到内核进程返回执行结果。\n\n  \n\n- nonblocking I/O\n\n  进程不断的调用recvfrom，内核在数据包就绪之前一直返回EWOULDBLOCK标识。数据包就绪之后再开始复制数据，完成后返回OK。\n\n  \n\n- I/O multiplexing (`select` and `poll`)\n\n  在直接调用recvfrom之前，先调用select来确定数据报是否就绪，如果就绪了内核会返回一个readable标识。收到readable标识后再去调用recvform来通知内核执行复制操作。\n\n  \n\n  总结：这个和第一个blocking I/O来比没啥太大优点，还多了一次系统调用。好处就是可以等待多个数据报就绪的结果了，然后哪个就绪了就处理哪个。\n\n  ##### 关于select,poll和epoll\n\n  他们都是用来监听文件描述符fd的系统调用方法。select和poll可以认为是一样的，都是使用轮询的方式来从很多fd中检查哪一个就绪了。由于时间复杂度为O(n)，不适合执行大量密集fd的监控,后来出现了时间复杂度为O(1)的epoll替代他们。它是一种类似订阅的实现, `epoll` 包括(`epoll_create`, `epoll_ctl`, `epoll_wait`) ,首先epoll_create建立一个epoll，`epoll_ctl`来设定要监控的fd类型和事件类型，`epoll_wait`来获取结果\n\n- signal driven I/O (`SIGIO`)\n\n  \n\n  首先调用sigaction建立一个信号句柄，内核会立即返回，这个过程非阻塞。数据报就绪后，内核会给进程生成一个SIGIO，这个时候可以再去调用recvfrom\n\n- asynchronous I/O (the POSIX `aio_` functions)\n\n  \n\n通过调用aio_read告知内核再整个input操作完成后(包括等待数据、复制到user缓冲)再通知，整个过程中进程是没有阻塞的，是真正的异步操作。\n\n**POSIX**如下规定：\n\n一个同步IO操作让申请进程在I/O操作结束之前一直被阻塞，反之异步操作就是没有被阻塞。\n\n所以说前面四种都是同步I/O，只有最后一个asynchronous I/O才是真正的异步I/O\n\n\n\n#### Java中的BIO，NIO，AIO\n\nbio: 基于java.lang.io\n\nnio: java1.4后引入 java.lang.nio\n\naio:Java 7引入\n\n\n\n#### 其他\n\n文件描述符(****file descriptor**,FD**,**fildes**)是一个获取文件资源(或其他IO资源)的句柄([handle](https://en.wikipedia.org/wiki/Handle_(computing)))，通常是一个非负整数\n\nThe **Portable Operating System Interface** (**POSIX**) :旨在维持操作系统兼容性的标准\n\n参考文献：\n\nhttps://jvns.ca/blog/2017/06/03/async-io-on-linux--select--poll--and-epoll/\n\nhttps://www.ibm.com/developerworks/cn/java/j-lo-javaio/index.html\n\nhttp://tutorials.jenkov.com/\n\n","slug":"IO模型详解","published":1,"date":"2020-04-28T14:07:59.490Z","updated":"2020-05-06T15:42:02.979Z","title":"IO模型详解","_id":"ckd2l2xdv0005vgv9gqu0eahi","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"NIO是什么\"><a href=\"#NIO是什么\" class=\"headerlink\" title=\"NIO是什么?\"></a>NIO是什么?</h2><p>定义：NIO(Non-blocking I/O,New I/O)即非阻塞I/O,属于IO模型的一种</p>\n<p>分类：同步/异步  阻塞/非阻塞 I/O </p>\n<p>首先什么是I/O操作?I/O(input/output),是机器获取和交换信息的主要渠道。</p>\n<p>在操作系统执行I/O操作的时候,通常都会涉及到用户态(User Mode)和内核态(Kernel Mode)的转换。</p>\n<p>对于一个input操作来说，通常有两个步骤。1、等待数据就绪 2、将数据从kernel缓冲复制到user缓冲</p>\n<p>Unix(-like)系统下的五种基本I/O模型</p>\n<ul>\n<li><p>blocking I/O</p>\n<p>一种常见的I/O模型，进程在调用recvfrom之后就一直处于阻塞状态，直到内核进程返回执行结果。</p>\n</li>\n</ul>\n<ul>\n<li><p>nonblocking I/O</p>\n<p>进程不断的调用recvfrom，内核在数据包就绪之前一直返回EWOULDBLOCK标识。数据包就绪之后再开始复制数据，完成后返回OK。</p>\n</li>\n</ul>\n<ul>\n<li><p>I/O multiplexing (<code>select</code> and <code>poll</code>)</p>\n<p>在直接调用recvfrom之前，先调用select来确定数据报是否就绪，如果就绪了内核会返回一个readable标识。收到readable标识后再去调用recvform来通知内核执行复制操作。</p>\n</li>\n</ul>\n<p>  总结：这个和第一个blocking I/O来比没啥太大优点，还多了一次系统调用。好处就是可以等待多个数据报就绪的结果了，然后哪个就绪了就处理哪个。</p>\n<h5 id=\"关于select-poll和epoll\"><a href=\"#关于select-poll和epoll\" class=\"headerlink\" title=\"关于select,poll和epoll\"></a>关于select,poll和epoll</h5><p>  他们都是用来监听文件描述符fd的系统调用方法。select和poll可以认为是一样的，都是使用轮询的方式来从很多fd中检查哪一个就绪了。由于时间复杂度为O(n)，不适合执行大量密集fd的监控,后来出现了时间复杂度为O(1)的epoll替代他们。它是一种类似订阅的实现, <code>epoll</code> 包括(<code>epoll_create</code>, <code>epoll_ctl</code>, <code>epoll_wait</code>) ,首先epoll_create建立一个epoll，<code>epoll_ctl</code>来设定要监控的fd类型和事件类型，<code>epoll_wait</code>来获取结果</p>\n<ul>\n<li>signal driven I/O (<code>SIGIO</code>)</li>\n</ul>\n<p>  首先调用sigaction建立一个信号句柄，内核会立即返回，这个过程非阻塞。数据报就绪后，内核会给进程生成一个SIGIO，这个时候可以再去调用recvfrom</p>\n<ul>\n<li>asynchronous I/O (the POSIX <code>aio_</code> functions)</li>\n</ul>\n<p>通过调用aio_read告知内核再整个input操作完成后(包括等待数据、复制到user缓冲)再通知，整个过程中进程是没有阻塞的，是真正的异步操作。</p>\n<p><strong>POSIX</strong>如下规定：</p>\n<p>一个同步IO操作让申请进程在I/O操作结束之前一直被阻塞，反之异步操作就是没有被阻塞。</p>\n<p>所以说前面四种都是同步I/O，只有最后一个asynchronous I/O才是真正的异步I/O</p>\n<h4 id=\"Java中的BIO，NIO，AIO\"><a href=\"#Java中的BIO，NIO，AIO\" class=\"headerlink\" title=\"Java中的BIO，NIO，AIO\"></a>Java中的BIO，NIO，AIO</h4><p>bio: 基于java.lang.io</p>\n<p>nio: java1.4后引入 java.lang.nio</p>\n<p>aio:Java 7引入</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>文件描述符(<strong>**file descriptor</strong>,FD<strong>,</strong>fildes**)是一个获取文件资源(或其他IO资源)的句柄(<a href=\"https://en.wikipedia.org/wiki/Handle_(computing)\" target=\"_blank\" rel=\"noopener\">handle</a>)，通常是一个非负整数</p>\n<p>The <strong>Portable Operating System Interface</strong> (<strong>POSIX</strong>) :旨在维持操作系统兼容性的标准</p>\n<p>参考文献：</p>\n<p><a href=\"https://jvns.ca/blog/2017/06/03/async-io-on-linux--select--poll--and-epoll/\" target=\"_blank\" rel=\"noopener\">https://jvns.ca/blog/2017/06/03/async-io-on-linux--select--poll--and-epoll/</a></p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-javaio/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/j-lo-javaio/index.html</a></p>\n<p><a href=\"http://tutorials.jenkov.com/\" target=\"_blank\" rel=\"noopener\">http://tutorials.jenkov.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"NIO是什么\"><a href=\"#NIO是什么\" class=\"headerlink\" title=\"NIO是什么?\"></a>NIO是什么?</h2><p>定义：NIO(Non-blocking I/O,New I/O)即非阻塞I/O,属于IO模型的一种</p>\n<p>分类：同步/异步  阻塞/非阻塞 I/O </p>\n<p>首先什么是I/O操作?I/O(input/output),是机器获取和交换信息的主要渠道。</p>\n<p>在操作系统执行I/O操作的时候,通常都会涉及到用户态(User Mode)和内核态(Kernel Mode)的转换。</p>\n<p>对于一个input操作来说，通常有两个步骤。1、等待数据就绪 2、将数据从kernel缓冲复制到user缓冲</p>\n<p>Unix(-like)系统下的五种基本I/O模型</p>\n<ul>\n<li><p>blocking I/O</p>\n<p>一种常见的I/O模型，进程在调用recvfrom之后就一直处于阻塞状态，直到内核进程返回执行结果。</p>\n</li>\n</ul>\n<ul>\n<li><p>nonblocking I/O</p>\n<p>进程不断的调用recvfrom，内核在数据包就绪之前一直返回EWOULDBLOCK标识。数据包就绪之后再开始复制数据，完成后返回OK。</p>\n</li>\n</ul>\n<ul>\n<li><p>I/O multiplexing (<code>select</code> and <code>poll</code>)</p>\n<p>在直接调用recvfrom之前，先调用select来确定数据报是否就绪，如果就绪了内核会返回一个readable标识。收到readable标识后再去调用recvform来通知内核执行复制操作。</p>\n</li>\n</ul>\n<p>  总结：这个和第一个blocking I/O来比没啥太大优点，还多了一次系统调用。好处就是可以等待多个数据报就绪的结果了，然后哪个就绪了就处理哪个。</p>\n<h5 id=\"关于select-poll和epoll\"><a href=\"#关于select-poll和epoll\" class=\"headerlink\" title=\"关于select,poll和epoll\"></a>关于select,poll和epoll</h5><p>  他们都是用来监听文件描述符fd的系统调用方法。select和poll可以认为是一样的，都是使用轮询的方式来从很多fd中检查哪一个就绪了。由于时间复杂度为O(n)，不适合执行大量密集fd的监控,后来出现了时间复杂度为O(1)的epoll替代他们。它是一种类似订阅的实现, <code>epoll</code> 包括(<code>epoll_create</code>, <code>epoll_ctl</code>, <code>epoll_wait</code>) ,首先epoll_create建立一个epoll，<code>epoll_ctl</code>来设定要监控的fd类型和事件类型，<code>epoll_wait</code>来获取结果</p>\n<ul>\n<li>signal driven I/O (<code>SIGIO</code>)</li>\n</ul>\n<p>  首先调用sigaction建立一个信号句柄，内核会立即返回，这个过程非阻塞。数据报就绪后，内核会给进程生成一个SIGIO，这个时候可以再去调用recvfrom</p>\n<ul>\n<li>asynchronous I/O (the POSIX <code>aio_</code> functions)</li>\n</ul>\n<p>通过调用aio_read告知内核再整个input操作完成后(包括等待数据、复制到user缓冲)再通知，整个过程中进程是没有阻塞的，是真正的异步操作。</p>\n<p><strong>POSIX</strong>如下规定：</p>\n<p>一个同步IO操作让申请进程在I/O操作结束之前一直被阻塞，反之异步操作就是没有被阻塞。</p>\n<p>所以说前面四种都是同步I/O，只有最后一个asynchronous I/O才是真正的异步I/O</p>\n<h4 id=\"Java中的BIO，NIO，AIO\"><a href=\"#Java中的BIO，NIO，AIO\" class=\"headerlink\" title=\"Java中的BIO，NIO，AIO\"></a>Java中的BIO，NIO，AIO</h4><p>bio: 基于java.lang.io</p>\n<p>nio: java1.4后引入 java.lang.nio</p>\n<p>aio:Java 7引入</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>文件描述符(<strong>**file descriptor</strong>,FD<strong>,</strong>fildes**)是一个获取文件资源(或其他IO资源)的句柄(<a href=\"https://en.wikipedia.org/wiki/Handle_(computing)\" target=\"_blank\" rel=\"noopener\">handle</a>)，通常是一个非负整数</p>\n<p>The <strong>Portable Operating System Interface</strong> (<strong>POSIX</strong>) :旨在维持操作系统兼容性的标准</p>\n<p>参考文献：</p>\n<p><a href=\"https://jvns.ca/blog/2017/06/03/async-io-on-linux--select--poll--and-epoll/\" target=\"_blank\" rel=\"noopener\">https://jvns.ca/blog/2017/06/03/async-io-on-linux--select--poll--and-epoll/</a></p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-javaio/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/j-lo-javaio/index.html</a></p>\n<p><a href=\"http://tutorials.jenkov.com/\" target=\"_blank\" rel=\"noopener\">http://tutorials.jenkov.com/</a></p>\n"},{"_content":"","source":"_posts/微服务.md","raw":"","slug":"微服务","published":1,"date":"2020-05-11T14:48:00.478Z","updated":"2020-04-30T12:55:51.609Z","title":"微服务","_id":"ckd2l2xg60006vgv94ww082fk","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/Spring.md","raw":"","slug":"Spring","published":1,"date":"2020-04-30T12:56:03.050Z","updated":"2020-05-12T00:55:34.599Z","title":"Spring","_id":"ckd2l2xg70007vgv96kpuh2hn","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"### 锁\n\n### innoDB行锁\n\n\n\n1.记录锁record lock\n\n2.间隙锁gap lock\n\n###### 只存在RR中\n\n3.临键锁next-key lock\n\nnext-key lock = gap lock + record lock\n\nselect ... in share mode\n\nselect ... for update\n\nRR RC\n\nMVCC\n\n\n\nRead Uncommited\n\nSerilizeable\n\n\n\n意向锁\n\n排他锁\n\n共享锁","source":"_posts/MySQL.md","raw":"### 锁\n\n### innoDB行锁\n\n\n\n1.记录锁record lock\n\n2.间隙锁gap lock\n\n###### 只存在RR中\n\n3.临键锁next-key lock\n\nnext-key lock = gap lock + record lock\n\nselect ... in share mode\n\nselect ... for update\n\nRR RC\n\nMVCC\n\n\n\nRead Uncommited\n\nSerilizeable\n\n\n\n意向锁\n\n排他锁\n\n共享锁","slug":"MySQL","published":1,"date":"2020-04-30T12:55:51.609Z","updated":"2020-04-30T13:58:05.301Z","title":"MySQL","_id":"ckd2l2xgj0008vgv93rx6agkk","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h3><h3 id=\"innoDB行锁\"><a href=\"#innoDB行锁\" class=\"headerlink\" title=\"innoDB行锁\"></a>innoDB行锁</h3><p>1.记录锁record lock</p>\n<p>2.间隙锁gap lock</p>\n<h6 id=\"只存在RR中\"><a href=\"#只存在RR中\" class=\"headerlink\" title=\"只存在RR中\"></a>只存在RR中</h6><p>3.临键锁next-key lock</p>\n<p>next-key lock = gap lock + record lock</p>\n<p>select … in share mode</p>\n<p>select … for update</p>\n<p>RR RC</p>\n<p>MVCC</p>\n<p>Read Uncommited</p>\n<p>Serilizeable</p>\n<p>意向锁</p>\n<p>排他锁</p>\n<p>共享锁</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h3><h3 id=\"innoDB行锁\"><a href=\"#innoDB行锁\" class=\"headerlink\" title=\"innoDB行锁\"></a>innoDB行锁</h3><p>1.记录锁record lock</p>\n<p>2.间隙锁gap lock</p>\n<h6 id=\"只存在RR中\"><a href=\"#只存在RR中\" class=\"headerlink\" title=\"只存在RR中\"></a>只存在RR中</h6><p>3.临键锁next-key lock</p>\n<p>next-key lock = gap lock + record lock</p>\n<p>select … in share mode</p>\n<p>select … for update</p>\n<p>RR RC</p>\n<p>MVCC</p>\n<p>Read Uncommited</p>\n<p>Serilizeable</p>\n<p>意向锁</p>\n<p>排他锁</p>\n<p>共享锁</p>\n"},{"_content":"","source":"_posts/JVM.md","raw":"","slug":"JVM","published":1,"date":"2020-04-30T12:56:42.631Z","updated":"2020-04-30T12:55:51.609Z","title":"JVM","_id":"ckd2l2xgn0009vgv95oxobc9u","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/JUC.md","raw":"","slug":"JUC","published":1,"date":"2020-04-30T12:56:47.330Z","updated":"2020-04-30T12:55:51.609Z","title":"JUC","_id":"ckd2l2xgo000avgv965wr0hkc","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"1、kafka核心原理\n\n2、 优势\n\n3、 消息重复消费","source":"_posts/MQ.md","raw":"1、kafka核心原理\n\n2、 优势\n\n3、 消息重复消费","slug":"MQ","published":1,"date":"2020-04-30T12:56:55.725Z","updated":"2020-06-15T16:31:02.416Z","title":"MQ","_id":"ckd2l2xgu000bvgv9hi7158ve","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1、kafka核心原理</p>\n<p>2、 优势</p>\n<p>3、 消息重复消费</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、kafka核心原理</p>\n<p>2、 优势</p>\n<p>3、 消息重复消费</p>\n"},{"_content":"### 数据结构\n\n1、数组\n\n2、链表\n\n3、树\n\n二叉树、二叉搜索树、AVL树、B树、B+树、红黑树、Trie树\n\n前中后遍历、深度优先、广度优先\n\n4、栈\n\n5、队列\n\n单向、双向\n\n6、堆\n\n小顶堆、大顶堆\n\n7、图\n\n有向图、无向图、Dijkstra、Floyd\n\n8、哈希表\n\nHashMap\n\n### 排序算法\n\n##### 比较\n\n1、冒泡\n\n2、快排\n\n\n\n3、简单插入排序\n\n4、希尔排序\n\n\n\n5、选择排序\n\n6、堆排序\n\n\n\n7、归并排序\n\n\n\n##### 非比较\n\n8、计数排序\n\n9、基数排序\n\n10、桶排序","source":"_posts/数据结构和算法.md","raw":"### 数据结构\n\n1、数组\n\n2、链表\n\n3、树\n\n二叉树、二叉搜索树、AVL树、B树、B+树、红黑树、Trie树\n\n前中后遍历、深度优先、广度优先\n\n4、栈\n\n5、队列\n\n单向、双向\n\n6、堆\n\n小顶堆、大顶堆\n\n7、图\n\n有向图、无向图、Dijkstra、Floyd\n\n8、哈希表\n\nHashMap\n\n### 排序算法\n\n##### 比较\n\n1、冒泡\n\n2、快排\n\n\n\n3、简单插入排序\n\n4、希尔排序\n\n\n\n5、选择排序\n\n6、堆排序\n\n\n\n7、归并排序\n\n\n\n##### 非比较\n\n8、计数排序\n\n9、基数排序\n\n10、桶排序","slug":"数据结构和算法","published":1,"date":"2020-04-30T12:57:00.938Z","updated":"2020-05-26T16:24:12.498Z","title":"数据结构和算法","_id":"ckd2l2xhj000cvgv9awxd2bfm","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>1、数组</p>\n<p>2、链表</p>\n<p>3、树</p>\n<p>二叉树、二叉搜索树、AVL树、B树、B+树、红黑树、Trie树</p>\n<p>前中后遍历、深度优先、广度优先</p>\n<p>4、栈</p>\n<p>5、队列</p>\n<p>单向、双向</p>\n<p>6、堆</p>\n<p>小顶堆、大顶堆</p>\n<p>7、图</p>\n<p>有向图、无向图、Dijkstra、Floyd</p>\n<p>8、哈希表</p>\n<p>HashMap</p>\n<h3 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h3><h5 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h5><p>1、冒泡</p>\n<p>2、快排</p>\n<p>3、简单插入排序</p>\n<p>4、希尔排序</p>\n<p>5、选择排序</p>\n<p>6、堆排序</p>\n<p>7、归并排序</p>\n<h5 id=\"非比较\"><a href=\"#非比较\" class=\"headerlink\" title=\"非比较\"></a>非比较</h5><p>8、计数排序</p>\n<p>9、基数排序</p>\n<p>10、桶排序</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>1、数组</p>\n<p>2、链表</p>\n<p>3、树</p>\n<p>二叉树、二叉搜索树、AVL树、B树、B+树、红黑树、Trie树</p>\n<p>前中后遍历、深度优先、广度优先</p>\n<p>4、栈</p>\n<p>5、队列</p>\n<p>单向、双向</p>\n<p>6、堆</p>\n<p>小顶堆、大顶堆</p>\n<p>7、图</p>\n<p>有向图、无向图、Dijkstra、Floyd</p>\n<p>8、哈希表</p>\n<p>HashMap</p>\n<h3 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h3><h5 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h5><p>1、冒泡</p>\n<p>2、快排</p>\n<p>3、简单插入排序</p>\n<p>4、希尔排序</p>\n<p>5、选择排序</p>\n<p>6、堆排序</p>\n<p>7、归并排序</p>\n<h5 id=\"非比较\"><a href=\"#非比较\" class=\"headerlink\" title=\"非比较\"></a>非比较</h5><p>8、计数排序</p>\n<p>9、基数排序</p>\n<p>10、桶排序</p>\n"},{"_content":"","source":"_posts/分布式.md","raw":"","slug":"分布式","published":1,"date":"2020-05-11T14:48:07.142Z","updated":"2020-04-30T12:55:51.609Z","title":"分布式","_id":"ckd2l2xi6000dvgv92gqma9vh","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"1、实现N的阶乘\n public static int factorial(int n) {\n        if (n <= 0) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n}\npublic static int factorial2(int n) {\n        if (n <= 0) {\n            return 1;\n        } else {\n            int sum = 1;\n            while (n > 1) {\n                sum *= n;\n                n--;\n            }\n            return sum;\n        }\n    }\n2、抽象类和接口的区别\n\n抽象类：\n可以有构造函数，但是不能实例化。\n可以有抽象方法和非抽象方法。\n缺点是实现类只能单继承\n\n接口：\n没有构造函数\n方法默认为 public abstract\n成员变量默认为public static final\n1.8之后也可以有default和static修饰的成员方法，\ndefault方法目的是默认实现，不破坏现有代码，default方法中可以调用static方法\n另外：\nabstract的方法不能被static，native，synchronized和final修饰\n3、实现饿汉懒汉单例模式\n\n懒汉式：\npublic class Singleton {\n    private static Singleton singleton;\n\n    private Singleton() {\n    }\n    \n    public static Singleton getInstance() {\n        if (singleton == null) {\n            return new Singleton();\n        }\n        return singleton;\n    }\n}\n饿汉式：\npublic class Singleton2 {\n    private static Singleton2 instance = new Singleton2();\n\n    private Singleton2() {\n    }\n    \n    public static Singleton2 getInstance() {\n        return instance;\n    }\n}\n4、一个类存为hashmap的key要重写哪些方法？\n需要重写equals和hashcode方法\n\t\t1、为什么要重写\n\t\t2、怎么重写\n5、\n不会改变。因为传递的是值。\n6、java中怎样加锁？\n\n\n7、ThreadPoolExecutor里面的各个参数含义？\n\nint corePoolSize,    //核心线程数\nint maximumPoolSize, //最大线程数目\nlong keepAliveTime,    //当超出核心线程数目时，这个参数开始起作用，表示多出来的线程存活时长\nTimeUnit unit,         //时间单位\nBlockingQueue<Runnable> workQueue, //用来存储工作线程的队列，有LinkedBlockingQueue\\SynchronousQueue\nThreadFactory threadFactory,      //\nRejectedExecutionHandler handler //拒绝策略,有CallerRunsPolicy,AbortPolicy,DiscardPolicy,DiscardOldestPolicy四种\n\nhttps://www.cnblogs.com/baizhanshi/p/5469948.html\n8、\nSerial 收集器、ParNew 收集器、 Parallel Scavenge 收集器、Serial Old 收集器、Parallel Old 收集器、CMS 收集器、 G1 收集器\n\nhttps://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md\n9、是有限的。受到栈空间大小的限制，超出限制会报StackOverFlow错误。可以通过-Xss来设置栈空间大小。\n10、cpu过高或者频繁GC怎样定位问题？\n11、简述spring IOC和AOP，项目中哪里使用了？\nspring ioc 是一种容器，实现了依赖注入，将new对象的操作交给spring管理，ioc来保存该对象。\nspring aop \n12、redis缓存与数据库一致性如何保证？\nredis数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。\n13、为什么使用反向代理？\n负载均衡、安全性\n14、原子性\n15、join默认是什么、其他类型的join?\njoin默认是inner join\n16、有关系，查询的条件要和字段类型一致\n17、linux隐藏文件什么特点，如何显示\nls     显示文件\nls -a  显示文件和隐藏文件\n隐藏文件都以小数点 .开头  例如： .txt\n18、分布式系统数据一致性如何解决？\n分布式事务、分布式锁\n19、输入url经过哪些层？\n请求经过DNS解析，到nginx反向代理、转发路由\n静态代理：代理到静态资源，页面通过XHR请求后端\n动态代理：代理到tomcat/springboot服务、调用dao层/缓存层、返回结果\n\n\n\n\n\n阿里一面：\n\n自我介绍、自己做的项目和技术领域\n说一下sync的底层实现，锁优化，和lock的对比\n讲一下JVM参数调优详细过程\n为什么这么设置？好处是什么？描述gc场景，如何去分析gc日志？\nredis数据结构，使用场景，微博场景使用redis如何去设计用户关系？\n线程池参数设定，为什么这么设定，作用？7大参数\nspring的循环依赖如何解决？为什么要三级缓存？\n优先级队列的底层原理？\n阿里二面：\n\n自我介绍一下吧\n聊项目\n结合你项目问你如何设计，提出漏洞，你怎么解决？如何改进，万一挂了？加一台机器有没有问题？如果我非要不出问题怎么办？\n高并发下单扣库存场景如何设计\nrocketMQ架构设计原理\nDubbo框架实现原理\n最近读了什么书？平时怎么学习？\n常用的负载均衡，该怎么用，你能说下吗？\n阿里三面：\n\n这一面主要问项目，给你的压力感比较强\n结合项目问，为什么这么设计？让你去优化，你怎么优化，引导你用一个合理的更好的方式去优化，数据库的设计等\n在公司做了什么事情，各个系统业务线都是做什么的，你的绩效，手写算法链表反转？\n阿里四面：\n\nJVM的主要组成部分及其作用？\nJVM运行时数据区包含哪些？\nJVM垃圾回收机制，何时触发MinorGC等操作\nJVM的垃圾回收算法：\nJVM 调优的工具？\n常用的JVM调优参数？\n堆栈的区别？\n详细介绍一下 CMS 垃圾回收器？\n怎么判断对象是否可以被回收？\n新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？\njava类加载过程?\n把你知道的中间件都说一下吧（瞬间懵了一下）\nHR面：\n\n为什么来阿里？\n之前没考虑过阿里吗？\n毕业这么久了，你觉得自己最大的改变是什么？\n用一句话总结一下自己\n\n\n\n问我看了啥书（设计模式，图解HTTP，Modern PHP...被打断然后开始问设计模式）\n美团点评二面面试题：\n\n自我介绍\n进程调度、虚拟内存、进程与线程的区别、如何判断进程是否发生了内存泄漏\n常见的设计模式\ntcp与udp区别、tcp三次握手和四次挥手、流量控制、拥塞控制（四个算法，问得很细）\n分布式事务（并说一下2PC）、redis底层数据结构有哪些、持久化方式\nB+树索引和hash索引的区别\nredis分布式锁，其他实现方式，zookeeper如何实现的？\n分布式的一致性，强一致性和最终一致性\nLinux如何查看IO读写很高\n集群脑裂\nLinux中异步IO是如何实现的，消息队列如何实现的？\nRedis持久化，“并发高，数据量小”和“并发低，数据量大”，redis怎么选择存储模式\nMysql主从复制原理，mysql中如何做故障转移（容灾）\nNginx生命周期\n疫情期间，如果让你去调研所在城市口罩的可用量，有哪些方案？\n美团点评三面面试题：\n\nJava数据类型，同步机制\nhashmap correnthashmap？\nThreadlocal原理？\n讲讲贪心算法\n并发量很大，服务器宕机。你会怎么做？\n如果线上用户出现502错误你怎么排查？\n说一下你平时的学习方法？\n能告诉我你的博客地址吗？（当然可以啊，难道我要说不告诉你吗）\nsyn和lock的区别，哪个更好？\n怎选择 三次握手，第三次失败了，失败怎么办？为什么四次挥手？\nhashmap源码，为什么8个节点变成红黑树 又为什么到了6个节点才恢复为链表？（泊松分布）\n缓存穿透，怎解决？\n负载均衡算法的实现\n轮询和随机的缺点？\n分布式服务治理\ndns迭代和递归的区别\n算法：最大回文串\n美团点评HR面：\n\n自我介绍，抓住介绍的点让你详细说说？\n为什么实习经历只有一个月？\n为什么不去找其他的实习？\n其他的面试流程？\n考虑去哪里工作，北京是唯一选择吗？\n为什么来美团？你对美团技术团队的了解有多少？\n\n字节跳动一面面试题：\n\n自我介绍\n聊聊项目，时间大概15种左右，面试官会根据项目的一些设计点来提问，提前做好准备，别自己坑了自己\n分布式锁是锁住一部分还是整个系统，既然是锁住整个，为什么不用消息队列？\n详细讲下怎么用 mq 实现的最终一致性，还有怎么利用的消息事务？\ntcp 于 http 的关系，如何基于 tcp 实现 http\nJava 打开一个 http 流不关闭的后果\nio 流是基于抽象类还是接口实现的\n数据库的乐观锁和悲观锁是什么\n乐观锁实现原理，讲到一半，来写一个乐观锁吧\njava 的类中有什么方法\n线程安全是什么?\nvolatile 和 synchorized 的区别\n假如有一个类 A 和一个 类 B，这两个类都有一个变量和一个自增操作，A 类的变量用 volatile 修饰，B 类没有用，B 类的自增操作用 synchorized 修饰，他们都是线程安全的吗，如果都是，那为什么要用 synchorized ，volatile 不是更轻量吗，synchorized 有什么作用。\n智力题：岛上有群人，各自戴着红帽子或者白帽子，但都不知道自己帽子颜色，只有知道自己帽子颜色，第二天才能出岛，这时候有个人进来说了句“你们之中至少有一个人戴了顶红帽子”，问岛上的人最后的离开情况\n算法：矩阵中的最长上升序列\n字节跳动二面面试题：\n\n自我介绍\n项目介绍\njava集合框架全部介绍，从list set queue到map\nhashmap底层扩容线程安全问题\n如果一个对象 要作为hashmap的key需要做什么？\nThreadlocal类以及内存泄漏\n线程同步方式，具体每一个怎么做的\njvm类加载双亲委派模式，有没有能破坏这个模式的方法？类加载整个过程解释\n垃圾回收算法，垃圾回收器有什么？\nsynchronized用在静态和非静态方法的区别\n你做项目的思路是什么,看过什么源码，什么开源网站经常访间，看是什么学的的书不?\n字节跳动三面面试题：\n\n问项目相关的技术栈（我回答的是MongoDB）\n怼问：为什么要用MongoDB？为什么不用MySQL？MongoDB有哪些特性，能说一下吗？\n文档型数据库有哪些？ES与MongoDB有什么区别？为什么ES搜索更快？\n数据库都有哪些类型，关系型数据库和NoSQL有什么区别？\nNoSQL有哪些？他们的使用场景都说一下\n问JVM，类加载到卸载的过程都说一下\nUML都有哪些图？如何从这些UML的图中来实现你的需求设计？\n设计模式说一下，Spring源码看过吧？那说一下设计模式是如何在Spring中体现的？\nSpring为什么要用简单工厂模式？\n微服务了解过吧(了解过一点)，微服务都有什么好处？\n微服务都有哪些框架或中间件？\nSpringCloud都有哪些组件啊？和阿里开源的这些有什么不同呢？如果要你用你该如何选择？\nSOA了解过吧？那什么是SOA？SOA与微服务相比有什么优缺点？\n如果让你提高一个系统，你该怎么做？如果让你设计一个系统，你要考虑哪些方面？\n对什么技术比较熟悉（回答的Java多线程），JDK提供了什么来实现线程安全啊？\n超线程是什么？知道吗？（顿时懵了，啥啊，没听过）\n对未来的技术有什么规划？你为什么要学这些技术？","source":"_posts/面试题.md","raw":"1、实现N的阶乘\n public static int factorial(int n) {\n        if (n <= 0) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n}\npublic static int factorial2(int n) {\n        if (n <= 0) {\n            return 1;\n        } else {\n            int sum = 1;\n            while (n > 1) {\n                sum *= n;\n                n--;\n            }\n            return sum;\n        }\n    }\n2、抽象类和接口的区别\n\n抽象类：\n可以有构造函数，但是不能实例化。\n可以有抽象方法和非抽象方法。\n缺点是实现类只能单继承\n\n接口：\n没有构造函数\n方法默认为 public abstract\n成员变量默认为public static final\n1.8之后也可以有default和static修饰的成员方法，\ndefault方法目的是默认实现，不破坏现有代码，default方法中可以调用static方法\n另外：\nabstract的方法不能被static，native，synchronized和final修饰\n3、实现饿汉懒汉单例模式\n\n懒汉式：\npublic class Singleton {\n    private static Singleton singleton;\n\n    private Singleton() {\n    }\n    \n    public static Singleton getInstance() {\n        if (singleton == null) {\n            return new Singleton();\n        }\n        return singleton;\n    }\n}\n饿汉式：\npublic class Singleton2 {\n    private static Singleton2 instance = new Singleton2();\n\n    private Singleton2() {\n    }\n    \n    public static Singleton2 getInstance() {\n        return instance;\n    }\n}\n4、一个类存为hashmap的key要重写哪些方法？\n需要重写equals和hashcode方法\n\t\t1、为什么要重写\n\t\t2、怎么重写\n5、\n不会改变。因为传递的是值。\n6、java中怎样加锁？\n\n\n7、ThreadPoolExecutor里面的各个参数含义？\n\nint corePoolSize,    //核心线程数\nint maximumPoolSize, //最大线程数目\nlong keepAliveTime,    //当超出核心线程数目时，这个参数开始起作用，表示多出来的线程存活时长\nTimeUnit unit,         //时间单位\nBlockingQueue<Runnable> workQueue, //用来存储工作线程的队列，有LinkedBlockingQueue\\SynchronousQueue\nThreadFactory threadFactory,      //\nRejectedExecutionHandler handler //拒绝策略,有CallerRunsPolicy,AbortPolicy,DiscardPolicy,DiscardOldestPolicy四种\n\nhttps://www.cnblogs.com/baizhanshi/p/5469948.html\n8、\nSerial 收集器、ParNew 收集器、 Parallel Scavenge 收集器、Serial Old 收集器、Parallel Old 收集器、CMS 收集器、 G1 收集器\n\nhttps://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md\n9、是有限的。受到栈空间大小的限制，超出限制会报StackOverFlow错误。可以通过-Xss来设置栈空间大小。\n10、cpu过高或者频繁GC怎样定位问题？\n11、简述spring IOC和AOP，项目中哪里使用了？\nspring ioc 是一种容器，实现了依赖注入，将new对象的操作交给spring管理，ioc来保存该对象。\nspring aop \n12、redis缓存与数据库一致性如何保证？\nredis数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。\n13、为什么使用反向代理？\n负载均衡、安全性\n14、原子性\n15、join默认是什么、其他类型的join?\njoin默认是inner join\n16、有关系，查询的条件要和字段类型一致\n17、linux隐藏文件什么特点，如何显示\nls     显示文件\nls -a  显示文件和隐藏文件\n隐藏文件都以小数点 .开头  例如： .txt\n18、分布式系统数据一致性如何解决？\n分布式事务、分布式锁\n19、输入url经过哪些层？\n请求经过DNS解析，到nginx反向代理、转发路由\n静态代理：代理到静态资源，页面通过XHR请求后端\n动态代理：代理到tomcat/springboot服务、调用dao层/缓存层、返回结果\n\n\n\n\n\n阿里一面：\n\n自我介绍、自己做的项目和技术领域\n说一下sync的底层实现，锁优化，和lock的对比\n讲一下JVM参数调优详细过程\n为什么这么设置？好处是什么？描述gc场景，如何去分析gc日志？\nredis数据结构，使用场景，微博场景使用redis如何去设计用户关系？\n线程池参数设定，为什么这么设定，作用？7大参数\nspring的循环依赖如何解决？为什么要三级缓存？\n优先级队列的底层原理？\n阿里二面：\n\n自我介绍一下吧\n聊项目\n结合你项目问你如何设计，提出漏洞，你怎么解决？如何改进，万一挂了？加一台机器有没有问题？如果我非要不出问题怎么办？\n高并发下单扣库存场景如何设计\nrocketMQ架构设计原理\nDubbo框架实现原理\n最近读了什么书？平时怎么学习？\n常用的负载均衡，该怎么用，你能说下吗？\n阿里三面：\n\n这一面主要问项目，给你的压力感比较强\n结合项目问，为什么这么设计？让你去优化，你怎么优化，引导你用一个合理的更好的方式去优化，数据库的设计等\n在公司做了什么事情，各个系统业务线都是做什么的，你的绩效，手写算法链表反转？\n阿里四面：\n\nJVM的主要组成部分及其作用？\nJVM运行时数据区包含哪些？\nJVM垃圾回收机制，何时触发MinorGC等操作\nJVM的垃圾回收算法：\nJVM 调优的工具？\n常用的JVM调优参数？\n堆栈的区别？\n详细介绍一下 CMS 垃圾回收器？\n怎么判断对象是否可以被回收？\n新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？\njava类加载过程?\n把你知道的中间件都说一下吧（瞬间懵了一下）\nHR面：\n\n为什么来阿里？\n之前没考虑过阿里吗？\n毕业这么久了，你觉得自己最大的改变是什么？\n用一句话总结一下自己\n\n\n\n问我看了啥书（设计模式，图解HTTP，Modern PHP...被打断然后开始问设计模式）\n美团点评二面面试题：\n\n自我介绍\n进程调度、虚拟内存、进程与线程的区别、如何判断进程是否发生了内存泄漏\n常见的设计模式\ntcp与udp区别、tcp三次握手和四次挥手、流量控制、拥塞控制（四个算法，问得很细）\n分布式事务（并说一下2PC）、redis底层数据结构有哪些、持久化方式\nB+树索引和hash索引的区别\nredis分布式锁，其他实现方式，zookeeper如何实现的？\n分布式的一致性，强一致性和最终一致性\nLinux如何查看IO读写很高\n集群脑裂\nLinux中异步IO是如何实现的，消息队列如何实现的？\nRedis持久化，“并发高，数据量小”和“并发低，数据量大”，redis怎么选择存储模式\nMysql主从复制原理，mysql中如何做故障转移（容灾）\nNginx生命周期\n疫情期间，如果让你去调研所在城市口罩的可用量，有哪些方案？\n美团点评三面面试题：\n\nJava数据类型，同步机制\nhashmap correnthashmap？\nThreadlocal原理？\n讲讲贪心算法\n并发量很大，服务器宕机。你会怎么做？\n如果线上用户出现502错误你怎么排查？\n说一下你平时的学习方法？\n能告诉我你的博客地址吗？（当然可以啊，难道我要说不告诉你吗）\nsyn和lock的区别，哪个更好？\n怎选择 三次握手，第三次失败了，失败怎么办？为什么四次挥手？\nhashmap源码，为什么8个节点变成红黑树 又为什么到了6个节点才恢复为链表？（泊松分布）\n缓存穿透，怎解决？\n负载均衡算法的实现\n轮询和随机的缺点？\n分布式服务治理\ndns迭代和递归的区别\n算法：最大回文串\n美团点评HR面：\n\n自我介绍，抓住介绍的点让你详细说说？\n为什么实习经历只有一个月？\n为什么不去找其他的实习？\n其他的面试流程？\n考虑去哪里工作，北京是唯一选择吗？\n为什么来美团？你对美团技术团队的了解有多少？\n\n字节跳动一面面试题：\n\n自我介绍\n聊聊项目，时间大概15种左右，面试官会根据项目的一些设计点来提问，提前做好准备，别自己坑了自己\n分布式锁是锁住一部分还是整个系统，既然是锁住整个，为什么不用消息队列？\n详细讲下怎么用 mq 实现的最终一致性，还有怎么利用的消息事务？\ntcp 于 http 的关系，如何基于 tcp 实现 http\nJava 打开一个 http 流不关闭的后果\nio 流是基于抽象类还是接口实现的\n数据库的乐观锁和悲观锁是什么\n乐观锁实现原理，讲到一半，来写一个乐观锁吧\njava 的类中有什么方法\n线程安全是什么?\nvolatile 和 synchorized 的区别\n假如有一个类 A 和一个 类 B，这两个类都有一个变量和一个自增操作，A 类的变量用 volatile 修饰，B 类没有用，B 类的自增操作用 synchorized 修饰，他们都是线程安全的吗，如果都是，那为什么要用 synchorized ，volatile 不是更轻量吗，synchorized 有什么作用。\n智力题：岛上有群人，各自戴着红帽子或者白帽子，但都不知道自己帽子颜色，只有知道自己帽子颜色，第二天才能出岛，这时候有个人进来说了句“你们之中至少有一个人戴了顶红帽子”，问岛上的人最后的离开情况\n算法：矩阵中的最长上升序列\n字节跳动二面面试题：\n\n自我介绍\n项目介绍\njava集合框架全部介绍，从list set queue到map\nhashmap底层扩容线程安全问题\n如果一个对象 要作为hashmap的key需要做什么？\nThreadlocal类以及内存泄漏\n线程同步方式，具体每一个怎么做的\njvm类加载双亲委派模式，有没有能破坏这个模式的方法？类加载整个过程解释\n垃圾回收算法，垃圾回收器有什么？\nsynchronized用在静态和非静态方法的区别\n你做项目的思路是什么,看过什么源码，什么开源网站经常访间，看是什么学的的书不?\n字节跳动三面面试题：\n\n问项目相关的技术栈（我回答的是MongoDB）\n怼问：为什么要用MongoDB？为什么不用MySQL？MongoDB有哪些特性，能说一下吗？\n文档型数据库有哪些？ES与MongoDB有什么区别？为什么ES搜索更快？\n数据库都有哪些类型，关系型数据库和NoSQL有什么区别？\nNoSQL有哪些？他们的使用场景都说一下\n问JVM，类加载到卸载的过程都说一下\nUML都有哪些图？如何从这些UML的图中来实现你的需求设计？\n设计模式说一下，Spring源码看过吧？那说一下设计模式是如何在Spring中体现的？\nSpring为什么要用简单工厂模式？\n微服务了解过吧(了解过一点)，微服务都有什么好处？\n微服务都有哪些框架或中间件？\nSpringCloud都有哪些组件啊？和阿里开源的这些有什么不同呢？如果要你用你该如何选择？\nSOA了解过吧？那什么是SOA？SOA与微服务相比有什么优缺点？\n如果让你提高一个系统，你该怎么做？如果让你设计一个系统，你要考虑哪些方面？\n对什么技术比较熟悉（回答的Java多线程），JDK提供了什么来实现线程安全啊？\n超线程是什么？知道吗？（顿时懵了，啥啊，没听过）\n对未来的技术有什么规划？你为什么要学这些技术？","slug":"面试题","published":1,"date":"2020-05-22T00:47:12.519Z","updated":"2020-05-24T16:35:02.647Z","title":"面试题","_id":"ckd2l2xi7000evgv9a0jk7f4j","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1、实现N的阶乘<br> public static int factorial(int n) {<br>        if (n &lt;= 0) {<br>            return 1;<br>        }<br>        return n * factorial(n - 1);<br>}<br>public static int factorial2(int n) {<br>        if (n &lt;= 0) {<br>            return 1;<br>        } else {<br>            int sum = 1;<br>            while (n &gt; 1) {<br>                sum *= n;<br>                n–;<br>            }<br>            return sum;<br>        }<br>    }<br>2、抽象类和接口的区别</p>\n<p>抽象类：<br>可以有构造函数，但是不能实例化。<br>可以有抽象方法和非抽象方法。<br>缺点是实现类只能单继承</p>\n<p>接口：<br>没有构造函数<br>方法默认为 public abstract<br>成员变量默认为public static final<br>1.8之后也可以有default和static修饰的成员方法，<br>default方法目的是默认实现，不破坏现有代码，default方法中可以调用static方法<br>另外：<br>abstract的方法不能被static，native，synchronized和final修饰<br>3、实现饿汉懒汉单例模式</p>\n<p>懒汉式：<br>public class Singleton {<br>    private static Singleton singleton;</p>\n<pre><code>private Singleton() {\n}\n\npublic static Singleton getInstance() {\n    if (singleton == null) {\n        return new Singleton();\n    }\n    return singleton;\n}</code></pre><p>}<br>饿汉式：<br>public class Singleton2 {<br>    private static Singleton2 instance = new Singleton2();</p>\n<pre><code>private Singleton2() {\n}\n\npublic static Singleton2 getInstance() {\n    return instance;\n}</code></pre><p>}<br>4、一个类存为hashmap的key要重写哪些方法？<br>需要重写equals和hashcode方法<br>        1、为什么要重写<br>        2、怎么重写<br>5、<br>不会改变。因为传递的是值。<br>6、java中怎样加锁？</p>\n<p>7、ThreadPoolExecutor里面的各个参数含义？</p>\n<p>int corePoolSize,    //核心线程数<br>int maximumPoolSize, //最大线程数目<br>long keepAliveTime,    //当超出核心线程数目时，这个参数开始起作用，表示多出来的线程存活时长<br>TimeUnit unit,         //时间单位<br>BlockingQueue<Runnable> workQueue, //用来存储工作线程的队列，有LinkedBlockingQueue\\SynchronousQueue<br>ThreadFactory threadFactory,      //<br>RejectedExecutionHandler handler //拒绝策略,有CallerRunsPolicy,AbortPolicy,DiscardPolicy,DiscardOldestPolicy四种</p>\n<p><a href=\"https://www.cnblogs.com/baizhanshi/p/5469948.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/baizhanshi/p/5469948.html</a><br>8、<br>Serial 收集器、ParNew 收集器、 Parallel Scavenge 收集器、Serial Old 收集器、Parallel Old 收集器、CMS 收集器、 G1 收集器</p>\n<p><a href=\"https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md\" target=\"_blank\" rel=\"noopener\">https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md</a><br>9、是有限的。受到栈空间大小的限制，超出限制会报StackOverFlow错误。可以通过-Xss来设置栈空间大小。<br>10、cpu过高或者频繁GC怎样定位问题？<br>11、简述spring IOC和AOP，项目中哪里使用了？<br>spring ioc 是一种容器，实现了依赖注入，将new对象的操作交给spring管理，ioc来保存该对象。<br>spring aop<br>12、redis缓存与数据库一致性如何保证？<br>redis数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。<br>13、为什么使用反向代理？<br>负载均衡、安全性<br>14、原子性<br>15、join默认是什么、其他类型的join?<br>join默认是inner join<br>16、有关系，查询的条件要和字段类型一致<br>17、linux隐藏文件什么特点，如何显示<br>ls     显示文件<br>ls -a  显示文件和隐藏文件<br>隐藏文件都以小数点 .开头  例如： .txt<br>18、分布式系统数据一致性如何解决？<br>分布式事务、分布式锁<br>19、输入url经过哪些层？<br>请求经过DNS解析，到nginx反向代理、转发路由<br>静态代理：代理到静态资源，页面通过XHR请求后端<br>动态代理：代理到tomcat/springboot服务、调用dao层/缓存层、返回结果</p>\n<p>阿里一面：</p>\n<p>自我介绍、自己做的项目和技术领域<br>说一下sync的底层实现，锁优化，和lock的对比<br>讲一下JVM参数调优详细过程<br>为什么这么设置？好处是什么？描述gc场景，如何去分析gc日志？<br>redis数据结构，使用场景，微博场景使用redis如何去设计用户关系？<br>线程池参数设定，为什么这么设定，作用？7大参数<br>spring的循环依赖如何解决？为什么要三级缓存？<br>优先级队列的底层原理？<br>阿里二面：</p>\n<p>自我介绍一下吧<br>聊项目<br>结合你项目问你如何设计，提出漏洞，你怎么解决？如何改进，万一挂了？加一台机器有没有问题？如果我非要不出问题怎么办？<br>高并发下单扣库存场景如何设计<br>rocketMQ架构设计原理<br>Dubbo框架实现原理<br>最近读了什么书？平时怎么学习？<br>常用的负载均衡，该怎么用，你能说下吗？<br>阿里三面：</p>\n<p>这一面主要问项目，给你的压力感比较强<br>结合项目问，为什么这么设计？让你去优化，你怎么优化，引导你用一个合理的更好的方式去优化，数据库的设计等<br>在公司做了什么事情，各个系统业务线都是做什么的，你的绩效，手写算法链表反转？<br>阿里四面：</p>\n<p>JVM的主要组成部分及其作用？<br>JVM运行时数据区包含哪些？<br>JVM垃圾回收机制，何时触发MinorGC等操作<br>JVM的垃圾回收算法：<br>JVM 调优的工具？<br>常用的JVM调优参数？<br>堆栈的区别？<br>详细介绍一下 CMS 垃圾回收器？<br>怎么判断对象是否可以被回收？<br>新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？<br>java类加载过程?<br>把你知道的中间件都说一下吧（瞬间懵了一下）<br>HR面：</p>\n<p>为什么来阿里？<br>之前没考虑过阿里吗？<br>毕业这么久了，你觉得自己最大的改变是什么？<br>用一句话总结一下自己</p>\n<p>问我看了啥书（设计模式，图解HTTP，Modern PHP…被打断然后开始问设计模式）<br>美团点评二面面试题：</p>\n<p>自我介绍<br>进程调度、虚拟内存、进程与线程的区别、如何判断进程是否发生了内存泄漏<br>常见的设计模式<br>tcp与udp区别、tcp三次握手和四次挥手、流量控制、拥塞控制（四个算法，问得很细）<br>分布式事务（并说一下2PC）、redis底层数据结构有哪些、持久化方式<br>B+树索引和hash索引的区别<br>redis分布式锁，其他实现方式，zookeeper如何实现的？<br>分布式的一致性，强一致性和最终一致性<br>Linux如何查看IO读写很高<br>集群脑裂<br>Linux中异步IO是如何实现的，消息队列如何实现的？<br>Redis持久化，“并发高，数据量小”和“并发低，数据量大”，redis怎么选择存储模式<br>Mysql主从复制原理，mysql中如何做故障转移（容灾）<br>Nginx生命周期<br>疫情期间，如果让你去调研所在城市口罩的可用量，有哪些方案？<br>美团点评三面面试题：</p>\n<p>Java数据类型，同步机制<br>hashmap correnthashmap？<br>Threadlocal原理？<br>讲讲贪心算法<br>并发量很大，服务器宕机。你会怎么做？<br>如果线上用户出现502错误你怎么排查？<br>说一下你平时的学习方法？<br>能告诉我你的博客地址吗？（当然可以啊，难道我要说不告诉你吗）<br>syn和lock的区别，哪个更好？<br>怎选择 三次握手，第三次失败了，失败怎么办？为什么四次挥手？<br>hashmap源码，为什么8个节点变成红黑树 又为什么到了6个节点才恢复为链表？（泊松分布）<br>缓存穿透，怎解决？<br>负载均衡算法的实现<br>轮询和随机的缺点？<br>分布式服务治理<br>dns迭代和递归的区别<br>算法：最大回文串<br>美团点评HR面：</p>\n<p>自我介绍，抓住介绍的点让你详细说说？<br>为什么实习经历只有一个月？<br>为什么不去找其他的实习？<br>其他的面试流程？<br>考虑去哪里工作，北京是唯一选择吗？<br>为什么来美团？你对美团技术团队的了解有多少？</p>\n<p>字节跳动一面面试题：</p>\n<p>自我介绍<br>聊聊项目，时间大概15种左右，面试官会根据项目的一些设计点来提问，提前做好准备，别自己坑了自己<br>分布式锁是锁住一部分还是整个系统，既然是锁住整个，为什么不用消息队列？<br>详细讲下怎么用 mq 实现的最终一致性，还有怎么利用的消息事务？<br>tcp 于 http 的关系，如何基于 tcp 实现 http<br>Java 打开一个 http 流不关闭的后果<br>io 流是基于抽象类还是接口实现的<br>数据库的乐观锁和悲观锁是什么<br>乐观锁实现原理，讲到一半，来写一个乐观锁吧<br>java 的类中有什么方法<br>线程安全是什么?<br>volatile 和 synchorized 的区别<br>假如有一个类 A 和一个 类 B，这两个类都有一个变量和一个自增操作，A 类的变量用 volatile 修饰，B 类没有用，B 类的自增操作用 synchorized 修饰，他们都是线程安全的吗，如果都是，那为什么要用 synchorized ，volatile 不是更轻量吗，synchorized 有什么作用。<br>智力题：岛上有群人，各自戴着红帽子或者白帽子，但都不知道自己帽子颜色，只有知道自己帽子颜色，第二天才能出岛，这时候有个人进来说了句“你们之中至少有一个人戴了顶红帽子”，问岛上的人最后的离开情况<br>算法：矩阵中的最长上升序列<br>字节跳动二面面试题：</p>\n<p>自我介绍<br>项目介绍<br>java集合框架全部介绍，从list set queue到map<br>hashmap底层扩容线程安全问题<br>如果一个对象 要作为hashmap的key需要做什么？<br>Threadlocal类以及内存泄漏<br>线程同步方式，具体每一个怎么做的<br>jvm类加载双亲委派模式，有没有能破坏这个模式的方法？类加载整个过程解释<br>垃圾回收算法，垃圾回收器有什么？<br>synchronized用在静态和非静态方法的区别<br>你做项目的思路是什么,看过什么源码，什么开源网站经常访间，看是什么学的的书不?<br>字节跳动三面面试题：</p>\n<p>问项目相关的技术栈（我回答的是MongoDB）<br>怼问：为什么要用MongoDB？为什么不用MySQL？MongoDB有哪些特性，能说一下吗？<br>文档型数据库有哪些？ES与MongoDB有什么区别？为什么ES搜索更快？<br>数据库都有哪些类型，关系型数据库和NoSQL有什么区别？<br>NoSQL有哪些？他们的使用场景都说一下<br>问JVM，类加载到卸载的过程都说一下<br>UML都有哪些图？如何从这些UML的图中来实现你的需求设计？<br>设计模式说一下，Spring源码看过吧？那说一下设计模式是如何在Spring中体现的？<br>Spring为什么要用简单工厂模式？<br>微服务了解过吧(了解过一点)，微服务都有什么好处？<br>微服务都有哪些框架或中间件？<br>SpringCloud都有哪些组件啊？和阿里开源的这些有什么不同呢？如果要你用你该如何选择？<br>SOA了解过吧？那什么是SOA？SOA与微服务相比有什么优缺点？<br>如果让你提高一个系统，你该怎么做？如果让你设计一个系统，你要考虑哪些方面？<br>对什么技术比较熟悉（回答的Java多线程），JDK提供了什么来实现线程安全啊？<br>超线程是什么？知道吗？（顿时懵了，啥啊，没听过）<br>对未来的技术有什么规划？你为什么要学这些技术？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、实现N的阶乘<br> public static int factorial(int n) {<br>        if (n &lt;= 0) {<br>            return 1;<br>        }<br>        return n * factorial(n - 1);<br>}<br>public static int factorial2(int n) {<br>        if (n &lt;= 0) {<br>            return 1;<br>        } else {<br>            int sum = 1;<br>            while (n &gt; 1) {<br>                sum *= n;<br>                n–;<br>            }<br>            return sum;<br>        }<br>    }<br>2、抽象类和接口的区别</p>\n<p>抽象类：<br>可以有构造函数，但是不能实例化。<br>可以有抽象方法和非抽象方法。<br>缺点是实现类只能单继承</p>\n<p>接口：<br>没有构造函数<br>方法默认为 public abstract<br>成员变量默认为public static final<br>1.8之后也可以有default和static修饰的成员方法，<br>default方法目的是默认实现，不破坏现有代码，default方法中可以调用static方法<br>另外：<br>abstract的方法不能被static，native，synchronized和final修饰<br>3、实现饿汉懒汉单例模式</p>\n<p>懒汉式：<br>public class Singleton {<br>    private static Singleton singleton;</p>\n<pre><code>private Singleton() {\n}\n\npublic static Singleton getInstance() {\n    if (singleton == null) {\n        return new Singleton();\n    }\n    return singleton;\n}</code></pre><p>}<br>饿汉式：<br>public class Singleton2 {<br>    private static Singleton2 instance = new Singleton2();</p>\n<pre><code>private Singleton2() {\n}\n\npublic static Singleton2 getInstance() {\n    return instance;\n}</code></pre><p>}<br>4、一个类存为hashmap的key要重写哪些方法？<br>需要重写equals和hashcode方法<br>        1、为什么要重写<br>        2、怎么重写<br>5、<br>不会改变。因为传递的是值。<br>6、java中怎样加锁？</p>\n<p>7、ThreadPoolExecutor里面的各个参数含义？</p>\n<p>int corePoolSize,    //核心线程数<br>int maximumPoolSize, //最大线程数目<br>long keepAliveTime,    //当超出核心线程数目时，这个参数开始起作用，表示多出来的线程存活时长<br>TimeUnit unit,         //时间单位<br>BlockingQueue<Runnable> workQueue, //用来存储工作线程的队列，有LinkedBlockingQueue\\SynchronousQueue<br>ThreadFactory threadFactory,      //<br>RejectedExecutionHandler handler //拒绝策略,有CallerRunsPolicy,AbortPolicy,DiscardPolicy,DiscardOldestPolicy四种</p>\n<p><a href=\"https://www.cnblogs.com/baizhanshi/p/5469948.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/baizhanshi/p/5469948.html</a><br>8、<br>Serial 收集器、ParNew 收集器、 Parallel Scavenge 收集器、Serial Old 收集器、Parallel Old 收集器、CMS 收集器、 G1 收集器</p>\n<p><a href=\"https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md\" target=\"_blank\" rel=\"noopener\">https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md</a><br>9、是有限的。受到栈空间大小的限制，超出限制会报StackOverFlow错误。可以通过-Xss来设置栈空间大小。<br>10、cpu过高或者频繁GC怎样定位问题？<br>11、简述spring IOC和AOP，项目中哪里使用了？<br>spring ioc 是一种容器，实现了依赖注入，将new对象的操作交给spring管理，ioc来保存该对象。<br>spring aop<br>12、redis缓存与数据库一致性如何保证？<br>redis数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。<br>13、为什么使用反向代理？<br>负载均衡、安全性<br>14、原子性<br>15、join默认是什么、其他类型的join?<br>join默认是inner join<br>16、有关系，查询的条件要和字段类型一致<br>17、linux隐藏文件什么特点，如何显示<br>ls     显示文件<br>ls -a  显示文件和隐藏文件<br>隐藏文件都以小数点 .开头  例如： .txt<br>18、分布式系统数据一致性如何解决？<br>分布式事务、分布式锁<br>19、输入url经过哪些层？<br>请求经过DNS解析，到nginx反向代理、转发路由<br>静态代理：代理到静态资源，页面通过XHR请求后端<br>动态代理：代理到tomcat/springboot服务、调用dao层/缓存层、返回结果</p>\n<p>阿里一面：</p>\n<p>自我介绍、自己做的项目和技术领域<br>说一下sync的底层实现，锁优化，和lock的对比<br>讲一下JVM参数调优详细过程<br>为什么这么设置？好处是什么？描述gc场景，如何去分析gc日志？<br>redis数据结构，使用场景，微博场景使用redis如何去设计用户关系？<br>线程池参数设定，为什么这么设定，作用？7大参数<br>spring的循环依赖如何解决？为什么要三级缓存？<br>优先级队列的底层原理？<br>阿里二面：</p>\n<p>自我介绍一下吧<br>聊项目<br>结合你项目问你如何设计，提出漏洞，你怎么解决？如何改进，万一挂了？加一台机器有没有问题？如果我非要不出问题怎么办？<br>高并发下单扣库存场景如何设计<br>rocketMQ架构设计原理<br>Dubbo框架实现原理<br>最近读了什么书？平时怎么学习？<br>常用的负载均衡，该怎么用，你能说下吗？<br>阿里三面：</p>\n<p>这一面主要问项目，给你的压力感比较强<br>结合项目问，为什么这么设计？让你去优化，你怎么优化，引导你用一个合理的更好的方式去优化，数据库的设计等<br>在公司做了什么事情，各个系统业务线都是做什么的，你的绩效，手写算法链表反转？<br>阿里四面：</p>\n<p>JVM的主要组成部分及其作用？<br>JVM运行时数据区包含哪些？<br>JVM垃圾回收机制，何时触发MinorGC等操作<br>JVM的垃圾回收算法：<br>JVM 调优的工具？<br>常用的JVM调优参数？<br>堆栈的区别？<br>详细介绍一下 CMS 垃圾回收器？<br>怎么判断对象是否可以被回收？<br>新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？<br>java类加载过程?<br>把你知道的中间件都说一下吧（瞬间懵了一下）<br>HR面：</p>\n<p>为什么来阿里？<br>之前没考虑过阿里吗？<br>毕业这么久了，你觉得自己最大的改变是什么？<br>用一句话总结一下自己</p>\n<p>问我看了啥书（设计模式，图解HTTP，Modern PHP…被打断然后开始问设计模式）<br>美团点评二面面试题：</p>\n<p>自我介绍<br>进程调度、虚拟内存、进程与线程的区别、如何判断进程是否发生了内存泄漏<br>常见的设计模式<br>tcp与udp区别、tcp三次握手和四次挥手、流量控制、拥塞控制（四个算法，问得很细）<br>分布式事务（并说一下2PC）、redis底层数据结构有哪些、持久化方式<br>B+树索引和hash索引的区别<br>redis分布式锁，其他实现方式，zookeeper如何实现的？<br>分布式的一致性，强一致性和最终一致性<br>Linux如何查看IO读写很高<br>集群脑裂<br>Linux中异步IO是如何实现的，消息队列如何实现的？<br>Redis持久化，“并发高，数据量小”和“并发低，数据量大”，redis怎么选择存储模式<br>Mysql主从复制原理，mysql中如何做故障转移（容灾）<br>Nginx生命周期<br>疫情期间，如果让你去调研所在城市口罩的可用量，有哪些方案？<br>美团点评三面面试题：</p>\n<p>Java数据类型，同步机制<br>hashmap correnthashmap？<br>Threadlocal原理？<br>讲讲贪心算法<br>并发量很大，服务器宕机。你会怎么做？<br>如果线上用户出现502错误你怎么排查？<br>说一下你平时的学习方法？<br>能告诉我你的博客地址吗？（当然可以啊，难道我要说不告诉你吗）<br>syn和lock的区别，哪个更好？<br>怎选择 三次握手，第三次失败了，失败怎么办？为什么四次挥手？<br>hashmap源码，为什么8个节点变成红黑树 又为什么到了6个节点才恢复为链表？（泊松分布）<br>缓存穿透，怎解决？<br>负载均衡算法的实现<br>轮询和随机的缺点？<br>分布式服务治理<br>dns迭代和递归的区别<br>算法：最大回文串<br>美团点评HR面：</p>\n<p>自我介绍，抓住介绍的点让你详细说说？<br>为什么实习经历只有一个月？<br>为什么不去找其他的实习？<br>其他的面试流程？<br>考虑去哪里工作，北京是唯一选择吗？<br>为什么来美团？你对美团技术团队的了解有多少？</p>\n<p>字节跳动一面面试题：</p>\n<p>自我介绍<br>聊聊项目，时间大概15种左右，面试官会根据项目的一些设计点来提问，提前做好准备，别自己坑了自己<br>分布式锁是锁住一部分还是整个系统，既然是锁住整个，为什么不用消息队列？<br>详细讲下怎么用 mq 实现的最终一致性，还有怎么利用的消息事务？<br>tcp 于 http 的关系，如何基于 tcp 实现 http<br>Java 打开一个 http 流不关闭的后果<br>io 流是基于抽象类还是接口实现的<br>数据库的乐观锁和悲观锁是什么<br>乐观锁实现原理，讲到一半，来写一个乐观锁吧<br>java 的类中有什么方法<br>线程安全是什么?<br>volatile 和 synchorized 的区别<br>假如有一个类 A 和一个 类 B，这两个类都有一个变量和一个自增操作，A 类的变量用 volatile 修饰，B 类没有用，B 类的自增操作用 synchorized 修饰，他们都是线程安全的吗，如果都是，那为什么要用 synchorized ，volatile 不是更轻量吗，synchorized 有什么作用。<br>智力题：岛上有群人，各自戴着红帽子或者白帽子，但都不知道自己帽子颜色，只有知道自己帽子颜色，第二天才能出岛，这时候有个人进来说了句“你们之中至少有一个人戴了顶红帽子”，问岛上的人最后的离开情况<br>算法：矩阵中的最长上升序列<br>字节跳动二面面试题：</p>\n<p>自我介绍<br>项目介绍<br>java集合框架全部介绍，从list set queue到map<br>hashmap底层扩容线程安全问题<br>如果一个对象 要作为hashmap的key需要做什么？<br>Threadlocal类以及内存泄漏<br>线程同步方式，具体每一个怎么做的<br>jvm类加载双亲委派模式，有没有能破坏这个模式的方法？类加载整个过程解释<br>垃圾回收算法，垃圾回收器有什么？<br>synchronized用在静态和非静态方法的区别<br>你做项目的思路是什么,看过什么源码，什么开源网站经常访间，看是什么学的的书不?<br>字节跳动三面面试题：</p>\n<p>问项目相关的技术栈（我回答的是MongoDB）<br>怼问：为什么要用MongoDB？为什么不用MySQL？MongoDB有哪些特性，能说一下吗？<br>文档型数据库有哪些？ES与MongoDB有什么区别？为什么ES搜索更快？<br>数据库都有哪些类型，关系型数据库和NoSQL有什么区别？<br>NoSQL有哪些？他们的使用场景都说一下<br>问JVM，类加载到卸载的过程都说一下<br>UML都有哪些图？如何从这些UML的图中来实现你的需求设计？<br>设计模式说一下，Spring源码看过吧？那说一下设计模式是如何在Spring中体现的？<br>Spring为什么要用简单工厂模式？<br>微服务了解过吧(了解过一点)，微服务都有什么好处？<br>微服务都有哪些框架或中间件？<br>SpringCloud都有哪些组件啊？和阿里开源的这些有什么不同呢？如果要你用你该如何选择？<br>SOA了解过吧？那什么是SOA？SOA与微服务相比有什么优缺点？<br>如果让你提高一个系统，你该怎么做？如果让你设计一个系统，你要考虑哪些方面？<br>对什么技术比较熟悉（回答的Java多线程），JDK提供了什么来实现线程安全啊？<br>超线程是什么？知道吗？（顿时懵了，啥啊，没听过）<br>对未来的技术有什么规划？你为什么要学这些技术？</p>\n"},{"_content":"答：Spring是一个轻量级java开发框架。具有非侵入式的设计、通过控制反转降低代码耦合、声明式的事务管理、支持AOP等特点。框架中使用了很多设计模式。比如单例模式(spring bean)、工厂模式(BeanFactory )、模板模式(jdbcTemplete)、适配器模式(spring mvc)、策略模式、代理模式(aop)、装饰器模式(DataSource)。\n\n#### 单例模式\n\n单例模式是一种常用的创建型模式，他保证单个类再全局只能有一个由自己创建的实例，并提供一个全局访问点。单例模式分几种：懒汉式(线程不安全/安全)、饿汉式、双重检验锁式、注册式单例、枚举单例。\n\n**懒汉式单例**：首先将构造器私有化(都需要私有化)，声明一个静态类对象instance，然后声明一个public静态获取instance的方法，判断instance==null时实例化。\n\n由于线程不安全，我们在方法上加上synchronized锁来保证线程安全。\n\n**饿汉式**：由于懒汉式直接在实例化方法上加了锁，效率会比较低。我们可以直接在声明静态类对象instance就完成初始化操作，这样利用了classLoader机制的静态资源只加载一次的特点来保证线程安全，提升了获取实例时的效率。\n\n**双重检验锁式**：懒汉式并发效率不高，饿汉式没有实现延迟加载，我们可以实现双重检验锁的方式来兼顾这两点。(避免在类加载的时候就实例化，因为如果实例化instance很消耗资源，而实际运行时又用不到这个实力，那么明显很多资源是浪费的)。首先在懒汉式的基础上，在获取实例方法的内部先判断instance==null，如果为空再去加一个类锁。再次判断instance==null然后实例化。(再次判空的原因是第一个判断是先拦截一次，避免每次调用都实例化，并没有加锁，所以依然有线程安全问题)\n\n***容器式单例***\n\nspring当中装配bean使用的是注册表单例。\n\n**枚举式**，Effective Java作者推荐方式，延迟加载，线程安全，防止序列化和反射多次实例化\n\n#### 工厂模式\n\nspring创建bean对象\n\n#### 代理模式\n\nAOP实现代理模式\n\n#### 观察者模式\n\n#### 模板模式\n\njdbcTemplete\n\n#### 适配器模式\n\ndispatcherServlet\n\n#### 策略模式\n\n#### 装饰器模式","source":"_posts/Spring中的设计模式.md","raw":"答：Spring是一个轻量级java开发框架。具有非侵入式的设计、通过控制反转降低代码耦合、声明式的事务管理、支持AOP等特点。框架中使用了很多设计模式。比如单例模式(spring bean)、工厂模式(BeanFactory )、模板模式(jdbcTemplete)、适配器模式(spring mvc)、策略模式、代理模式(aop)、装饰器模式(DataSource)。\n\n#### 单例模式\n\n单例模式是一种常用的创建型模式，他保证单个类再全局只能有一个由自己创建的实例，并提供一个全局访问点。单例模式分几种：懒汉式(线程不安全/安全)、饿汉式、双重检验锁式、注册式单例、枚举单例。\n\n**懒汉式单例**：首先将构造器私有化(都需要私有化)，声明一个静态类对象instance，然后声明一个public静态获取instance的方法，判断instance==null时实例化。\n\n由于线程不安全，我们在方法上加上synchronized锁来保证线程安全。\n\n**饿汉式**：由于懒汉式直接在实例化方法上加了锁，效率会比较低。我们可以直接在声明静态类对象instance就完成初始化操作，这样利用了classLoader机制的静态资源只加载一次的特点来保证线程安全，提升了获取实例时的效率。\n\n**双重检验锁式**：懒汉式并发效率不高，饿汉式没有实现延迟加载，我们可以实现双重检验锁的方式来兼顾这两点。(避免在类加载的时候就实例化，因为如果实例化instance很消耗资源，而实际运行时又用不到这个实力，那么明显很多资源是浪费的)。首先在懒汉式的基础上，在获取实例方法的内部先判断instance==null，如果为空再去加一个类锁。再次判断instance==null然后实例化。(再次判空的原因是第一个判断是先拦截一次，避免每次调用都实例化，并没有加锁，所以依然有线程安全问题)\n\n***容器式单例***\n\nspring当中装配bean使用的是注册表单例。\n\n**枚举式**，Effective Java作者推荐方式，延迟加载，线程安全，防止序列化和反射多次实例化\n\n#### 工厂模式\n\nspring创建bean对象\n\n#### 代理模式\n\nAOP实现代理模式\n\n#### 观察者模式\n\n#### 模板模式\n\njdbcTemplete\n\n#### 适配器模式\n\ndispatcherServlet\n\n#### 策略模式\n\n#### 装饰器模式","slug":"Spring中的设计模式","published":1,"date":"2020-05-17T05:44:43.195Z","updated":"2020-05-17T14:44:47.256Z","title":"Spring中的设计模式","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd2l3r5l000094v935167vpa","content":"<p>答：Spring是一个轻量级java开发框架。具有非侵入式的设计、通过控制反转降低代码耦合、声明式的事务管理、支持AOP等特点。框架中使用了很多设计模式。比如单例模式(spring bean)、工厂模式(BeanFactory )、模板模式(jdbcTemplete)、适配器模式(spring mvc)、策略模式、代理模式(aop)、装饰器模式(DataSource)。</p>\n<h4 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h4><p>单例模式是一种常用的创建型模式，他保证单个类再全局只能有一个由自己创建的实例，并提供一个全局访问点。单例模式分几种：懒汉式(线程不安全/安全)、饿汉式、双重检验锁式、注册式单例、枚举单例。</p>\n<p><strong>懒汉式单例</strong>：首先将构造器私有化(都需要私有化)，声明一个静态类对象instance，然后声明一个public静态获取instance的方法，判断instance==null时实例化。</p>\n<p>由于线程不安全，我们在方法上加上synchronized锁来保证线程安全。</p>\n<p><strong>饿汉式</strong>：由于懒汉式直接在实例化方法上加了锁，效率会比较低。我们可以直接在声明静态类对象instance就完成初始化操作，这样利用了classLoader机制的静态资源只加载一次的特点来保证线程安全，提升了获取实例时的效率。</p>\n<p><strong>双重检验锁式</strong>：懒汉式并发效率不高，饿汉式没有实现延迟加载，我们可以实现双重检验锁的方式来兼顾这两点。(避免在类加载的时候就实例化，因为如果实例化instance很消耗资源，而实际运行时又用不到这个实力，那么明显很多资源是浪费的)。首先在懒汉式的基础上，在获取实例方法的内部先判断instance==null，如果为空再去加一个类锁。再次判断instance==null然后实例化。(再次判空的原因是第一个判断是先拦截一次，避免每次调用都实例化，并没有加锁，所以依然有线程安全问题)</p>\n<p><strong><em>容器式单例</em></strong></p>\n<p>spring当中装配bean使用的是注册表单例。</p>\n<p><strong>枚举式</strong>，Effective Java作者推荐方式，延迟加载，线程安全，防止序列化和反射多次实例化</p>\n<h4 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><p>spring创建bean对象</p>\n<h4 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h4><p>AOP实现代理模式</p>\n<h4 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h4><h4 id=\"模板模式\"><a href=\"#模板模式\" class=\"headerlink\" title=\"模板模式\"></a>模板模式</h4><p>jdbcTemplete</p>\n<h4 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h4><p>dispatcherServlet</p>\n<h4 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h4><h4 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h4>","site":{"data":{}},"excerpt":"","more":"<p>答：Spring是一个轻量级java开发框架。具有非侵入式的设计、通过控制反转降低代码耦合、声明式的事务管理、支持AOP等特点。框架中使用了很多设计模式。比如单例模式(spring bean)、工厂模式(BeanFactory )、模板模式(jdbcTemplete)、适配器模式(spring mvc)、策略模式、代理模式(aop)、装饰器模式(DataSource)。</p>\n<h4 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h4><p>单例模式是一种常用的创建型模式，他保证单个类再全局只能有一个由自己创建的实例，并提供一个全局访问点。单例模式分几种：懒汉式(线程不安全/安全)、饿汉式、双重检验锁式、注册式单例、枚举单例。</p>\n<p><strong>懒汉式单例</strong>：首先将构造器私有化(都需要私有化)，声明一个静态类对象instance，然后声明一个public静态获取instance的方法，判断instance==null时实例化。</p>\n<p>由于线程不安全，我们在方法上加上synchronized锁来保证线程安全。</p>\n<p><strong>饿汉式</strong>：由于懒汉式直接在实例化方法上加了锁，效率会比较低。我们可以直接在声明静态类对象instance就完成初始化操作，这样利用了classLoader机制的静态资源只加载一次的特点来保证线程安全，提升了获取实例时的效率。</p>\n<p><strong>双重检验锁式</strong>：懒汉式并发效率不高，饿汉式没有实现延迟加载，我们可以实现双重检验锁的方式来兼顾这两点。(避免在类加载的时候就实例化，因为如果实例化instance很消耗资源，而实际运行时又用不到这个实力，那么明显很多资源是浪费的)。首先在懒汉式的基础上，在获取实例方法的内部先判断instance==null，如果为空再去加一个类锁。再次判断instance==null然后实例化。(再次判空的原因是第一个判断是先拦截一次，避免每次调用都实例化，并没有加锁，所以依然有线程安全问题)</p>\n<p><strong><em>容器式单例</em></strong></p>\n<p>spring当中装配bean使用的是注册表单例。</p>\n<p><strong>枚举式</strong>，Effective Java作者推荐方式，延迟加载，线程安全，防止序列化和反射多次实例化</p>\n<h4 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><p>spring创建bean对象</p>\n<h4 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h4><p>AOP实现代理模式</p>\n<h4 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h4><h4 id=\"模板模式\"><a href=\"#模板模式\" class=\"headerlink\" title=\"模板模式\"></a>模板模式</h4><p>jdbcTemplete</p>\n<h4 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h4><p>dispatcherServlet</p>\n<h4 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h4><h4 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h4>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}